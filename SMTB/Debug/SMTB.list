
SMTB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08003000  08003000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024a8  08003110  08003110  00003110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000407c  080055b8  080055b8  000055b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009634  08009634  00009634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009638  08009638  00009638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  0800963c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a0  20000068  080096a4  00010068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000108  080096a4  00010108  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c8f8  00000000  00000000  00010091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e66  00000000  00000000  0001c989  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d64  00000000  00000000  0001e7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005a0  00000000  00000000  00021558  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000730  00000000  00000000  00021af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000418c  00000000  00000000  00022228  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002521  00000000  00000000  000263b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000288d5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001304  00000000  00000000  00028954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08003110 <__do_global_dtors_aux>:
 8003110:	b510      	push	{r4, lr}
 8003112:	4c05      	ldr	r4, [pc, #20]	; (8003128 <__do_global_dtors_aux+0x18>)
 8003114:	7823      	ldrb	r3, [r4, #0]
 8003116:	b933      	cbnz	r3, 8003126 <__do_global_dtors_aux+0x16>
 8003118:	4b04      	ldr	r3, [pc, #16]	; (800312c <__do_global_dtors_aux+0x1c>)
 800311a:	b113      	cbz	r3, 8003122 <__do_global_dtors_aux+0x12>
 800311c:	4804      	ldr	r0, [pc, #16]	; (8003130 <__do_global_dtors_aux+0x20>)
 800311e:	f3af 8000 	nop.w
 8003122:	2301      	movs	r3, #1
 8003124:	7023      	strb	r3, [r4, #0]
 8003126:	bd10      	pop	{r4, pc}
 8003128:	20000068 	.word	0x20000068
 800312c:	00000000 	.word	0x00000000
 8003130:	080055a0 	.word	0x080055a0

08003134 <frame_dummy>:
 8003134:	b508      	push	{r3, lr}
 8003136:	4b03      	ldr	r3, [pc, #12]	; (8003144 <frame_dummy+0x10>)
 8003138:	b11b      	cbz	r3, 8003142 <frame_dummy+0xe>
 800313a:	4903      	ldr	r1, [pc, #12]	; (8003148 <frame_dummy+0x14>)
 800313c:	4803      	ldr	r0, [pc, #12]	; (800314c <frame_dummy+0x18>)
 800313e:	f3af 8000 	nop.w
 8003142:	bd08      	pop	{r3, pc}
 8003144:	00000000 	.word	0x00000000
 8003148:	2000006c 	.word	0x2000006c
 800314c:	080055a0 	.word	0x080055a0

08003150 <__aeabi_drsub>:
 8003150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003154:	e002      	b.n	800315c <__adddf3>
 8003156:	bf00      	nop

08003158 <__aeabi_dsub>:
 8003158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800315c <__adddf3>:
 800315c:	b530      	push	{r4, r5, lr}
 800315e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003166:	ea94 0f05 	teq	r4, r5
 800316a:	bf08      	it	eq
 800316c:	ea90 0f02 	teqeq	r0, r2
 8003170:	bf1f      	itttt	ne
 8003172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800317a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800317e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003182:	f000 80e2 	beq.w	800334a <__adddf3+0x1ee>
 8003186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800318a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800318e:	bfb8      	it	lt
 8003190:	426d      	neglt	r5, r5
 8003192:	dd0c      	ble.n	80031ae <__adddf3+0x52>
 8003194:	442c      	add	r4, r5
 8003196:	ea80 0202 	eor.w	r2, r0, r2
 800319a:	ea81 0303 	eor.w	r3, r1, r3
 800319e:	ea82 0000 	eor.w	r0, r2, r0
 80031a2:	ea83 0101 	eor.w	r1, r3, r1
 80031a6:	ea80 0202 	eor.w	r2, r0, r2
 80031aa:	ea81 0303 	eor.w	r3, r1, r3
 80031ae:	2d36      	cmp	r5, #54	; 0x36
 80031b0:	bf88      	it	hi
 80031b2:	bd30      	pophi	{r4, r5, pc}
 80031b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80031b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80031bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80031c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80031c4:	d002      	beq.n	80031cc <__adddf3+0x70>
 80031c6:	4240      	negs	r0, r0
 80031c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80031cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80031d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80031d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80031d8:	d002      	beq.n	80031e0 <__adddf3+0x84>
 80031da:	4252      	negs	r2, r2
 80031dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80031e0:	ea94 0f05 	teq	r4, r5
 80031e4:	f000 80a7 	beq.w	8003336 <__adddf3+0x1da>
 80031e8:	f1a4 0401 	sub.w	r4, r4, #1
 80031ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80031f0:	db0d      	blt.n	800320e <__adddf3+0xb2>
 80031f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80031f6:	fa22 f205 	lsr.w	r2, r2, r5
 80031fa:	1880      	adds	r0, r0, r2
 80031fc:	f141 0100 	adc.w	r1, r1, #0
 8003200:	fa03 f20e 	lsl.w	r2, r3, lr
 8003204:	1880      	adds	r0, r0, r2
 8003206:	fa43 f305 	asr.w	r3, r3, r5
 800320a:	4159      	adcs	r1, r3
 800320c:	e00e      	b.n	800322c <__adddf3+0xd0>
 800320e:	f1a5 0520 	sub.w	r5, r5, #32
 8003212:	f10e 0e20 	add.w	lr, lr, #32
 8003216:	2a01      	cmp	r2, #1
 8003218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800321c:	bf28      	it	cs
 800321e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003222:	fa43 f305 	asr.w	r3, r3, r5
 8003226:	18c0      	adds	r0, r0, r3
 8003228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800322c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003230:	d507      	bpl.n	8003242 <__adddf3+0xe6>
 8003232:	f04f 0e00 	mov.w	lr, #0
 8003236:	f1dc 0c00 	rsbs	ip, ip, #0
 800323a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800323e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003246:	d31b      	bcc.n	8003280 <__adddf3+0x124>
 8003248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800324c:	d30c      	bcc.n	8003268 <__adddf3+0x10c>
 800324e:	0849      	lsrs	r1, r1, #1
 8003250:	ea5f 0030 	movs.w	r0, r0, rrx
 8003254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003258:	f104 0401 	add.w	r4, r4, #1
 800325c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003264:	f080 809a 	bcs.w	800339c <__adddf3+0x240>
 8003268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800326c:	bf08      	it	eq
 800326e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003272:	f150 0000 	adcs.w	r0, r0, #0
 8003276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800327a:	ea41 0105 	orr.w	r1, r1, r5
 800327e:	bd30      	pop	{r4, r5, pc}
 8003280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003284:	4140      	adcs	r0, r0
 8003286:	eb41 0101 	adc.w	r1, r1, r1
 800328a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800328e:	f1a4 0401 	sub.w	r4, r4, #1
 8003292:	d1e9      	bne.n	8003268 <__adddf3+0x10c>
 8003294:	f091 0f00 	teq	r1, #0
 8003298:	bf04      	itt	eq
 800329a:	4601      	moveq	r1, r0
 800329c:	2000      	moveq	r0, #0
 800329e:	fab1 f381 	clz	r3, r1
 80032a2:	bf08      	it	eq
 80032a4:	3320      	addeq	r3, #32
 80032a6:	f1a3 030b 	sub.w	r3, r3, #11
 80032aa:	f1b3 0220 	subs.w	r2, r3, #32
 80032ae:	da0c      	bge.n	80032ca <__adddf3+0x16e>
 80032b0:	320c      	adds	r2, #12
 80032b2:	dd08      	ble.n	80032c6 <__adddf3+0x16a>
 80032b4:	f102 0c14 	add.w	ip, r2, #20
 80032b8:	f1c2 020c 	rsb	r2, r2, #12
 80032bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80032c0:	fa21 f102 	lsr.w	r1, r1, r2
 80032c4:	e00c      	b.n	80032e0 <__adddf3+0x184>
 80032c6:	f102 0214 	add.w	r2, r2, #20
 80032ca:	bfd8      	it	le
 80032cc:	f1c2 0c20 	rsble	ip, r2, #32
 80032d0:	fa01 f102 	lsl.w	r1, r1, r2
 80032d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80032d8:	bfdc      	itt	le
 80032da:	ea41 010c 	orrle.w	r1, r1, ip
 80032de:	4090      	lslle	r0, r2
 80032e0:	1ae4      	subs	r4, r4, r3
 80032e2:	bfa2      	ittt	ge
 80032e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80032e8:	4329      	orrge	r1, r5
 80032ea:	bd30      	popge	{r4, r5, pc}
 80032ec:	ea6f 0404 	mvn.w	r4, r4
 80032f0:	3c1f      	subs	r4, #31
 80032f2:	da1c      	bge.n	800332e <__adddf3+0x1d2>
 80032f4:	340c      	adds	r4, #12
 80032f6:	dc0e      	bgt.n	8003316 <__adddf3+0x1ba>
 80032f8:	f104 0414 	add.w	r4, r4, #20
 80032fc:	f1c4 0220 	rsb	r2, r4, #32
 8003300:	fa20 f004 	lsr.w	r0, r0, r4
 8003304:	fa01 f302 	lsl.w	r3, r1, r2
 8003308:	ea40 0003 	orr.w	r0, r0, r3
 800330c:	fa21 f304 	lsr.w	r3, r1, r4
 8003310:	ea45 0103 	orr.w	r1, r5, r3
 8003314:	bd30      	pop	{r4, r5, pc}
 8003316:	f1c4 040c 	rsb	r4, r4, #12
 800331a:	f1c4 0220 	rsb	r2, r4, #32
 800331e:	fa20 f002 	lsr.w	r0, r0, r2
 8003322:	fa01 f304 	lsl.w	r3, r1, r4
 8003326:	ea40 0003 	orr.w	r0, r0, r3
 800332a:	4629      	mov	r1, r5
 800332c:	bd30      	pop	{r4, r5, pc}
 800332e:	fa21 f004 	lsr.w	r0, r1, r4
 8003332:	4629      	mov	r1, r5
 8003334:	bd30      	pop	{r4, r5, pc}
 8003336:	f094 0f00 	teq	r4, #0
 800333a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800333e:	bf06      	itte	eq
 8003340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003344:	3401      	addeq	r4, #1
 8003346:	3d01      	subne	r5, #1
 8003348:	e74e      	b.n	80031e8 <__adddf3+0x8c>
 800334a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800334e:	bf18      	it	ne
 8003350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003354:	d029      	beq.n	80033aa <__adddf3+0x24e>
 8003356:	ea94 0f05 	teq	r4, r5
 800335a:	bf08      	it	eq
 800335c:	ea90 0f02 	teqeq	r0, r2
 8003360:	d005      	beq.n	800336e <__adddf3+0x212>
 8003362:	ea54 0c00 	orrs.w	ip, r4, r0
 8003366:	bf04      	itt	eq
 8003368:	4619      	moveq	r1, r3
 800336a:	4610      	moveq	r0, r2
 800336c:	bd30      	pop	{r4, r5, pc}
 800336e:	ea91 0f03 	teq	r1, r3
 8003372:	bf1e      	ittt	ne
 8003374:	2100      	movne	r1, #0
 8003376:	2000      	movne	r0, #0
 8003378:	bd30      	popne	{r4, r5, pc}
 800337a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800337e:	d105      	bne.n	800338c <__adddf3+0x230>
 8003380:	0040      	lsls	r0, r0, #1
 8003382:	4149      	adcs	r1, r1
 8003384:	bf28      	it	cs
 8003386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800338a:	bd30      	pop	{r4, r5, pc}
 800338c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003390:	bf3c      	itt	cc
 8003392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003396:	bd30      	popcc	{r4, r5, pc}
 8003398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800339c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80033a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	bd30      	pop	{r4, r5, pc}
 80033aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80033ae:	bf1a      	itte	ne
 80033b0:	4619      	movne	r1, r3
 80033b2:	4610      	movne	r0, r2
 80033b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80033b8:	bf1c      	itt	ne
 80033ba:	460b      	movne	r3, r1
 80033bc:	4602      	movne	r2, r0
 80033be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80033c2:	bf06      	itte	eq
 80033c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80033c8:	ea91 0f03 	teqeq	r1, r3
 80033cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80033d0:	bd30      	pop	{r4, r5, pc}
 80033d2:	bf00      	nop

080033d4 <__aeabi_ui2d>:
 80033d4:	f090 0f00 	teq	r0, #0
 80033d8:	bf04      	itt	eq
 80033da:	2100      	moveq	r1, #0
 80033dc:	4770      	bxeq	lr
 80033de:	b530      	push	{r4, r5, lr}
 80033e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80033e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80033e8:	f04f 0500 	mov.w	r5, #0
 80033ec:	f04f 0100 	mov.w	r1, #0
 80033f0:	e750      	b.n	8003294 <__adddf3+0x138>
 80033f2:	bf00      	nop

080033f4 <__aeabi_i2d>:
 80033f4:	f090 0f00 	teq	r0, #0
 80033f8:	bf04      	itt	eq
 80033fa:	2100      	moveq	r1, #0
 80033fc:	4770      	bxeq	lr
 80033fe:	b530      	push	{r4, r5, lr}
 8003400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800340c:	bf48      	it	mi
 800340e:	4240      	negmi	r0, r0
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	e73e      	b.n	8003294 <__adddf3+0x138>
 8003416:	bf00      	nop

08003418 <__aeabi_f2d>:
 8003418:	0042      	lsls	r2, r0, #1
 800341a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800341e:	ea4f 0131 	mov.w	r1, r1, rrx
 8003422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003426:	bf1f      	itttt	ne
 8003428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800342c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003434:	4770      	bxne	lr
 8003436:	f092 0f00 	teq	r2, #0
 800343a:	bf14      	ite	ne
 800343c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003440:	4770      	bxeq	lr
 8003442:	b530      	push	{r4, r5, lr}
 8003444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800344c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003450:	e720      	b.n	8003294 <__adddf3+0x138>
 8003452:	bf00      	nop

08003454 <__aeabi_ul2d>:
 8003454:	ea50 0201 	orrs.w	r2, r0, r1
 8003458:	bf08      	it	eq
 800345a:	4770      	bxeq	lr
 800345c:	b530      	push	{r4, r5, lr}
 800345e:	f04f 0500 	mov.w	r5, #0
 8003462:	e00a      	b.n	800347a <__aeabi_l2d+0x16>

08003464 <__aeabi_l2d>:
 8003464:	ea50 0201 	orrs.w	r2, r0, r1
 8003468:	bf08      	it	eq
 800346a:	4770      	bxeq	lr
 800346c:	b530      	push	{r4, r5, lr}
 800346e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003472:	d502      	bpl.n	800347a <__aeabi_l2d+0x16>
 8003474:	4240      	negs	r0, r0
 8003476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800347a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800347e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003486:	f43f aedc 	beq.w	8003242 <__adddf3+0xe6>
 800348a:	f04f 0203 	mov.w	r2, #3
 800348e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003492:	bf18      	it	ne
 8003494:	3203      	addne	r2, #3
 8003496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800349a:	bf18      	it	ne
 800349c:	3203      	addne	r2, #3
 800349e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80034a2:	f1c2 0320 	rsb	r3, r2, #32
 80034a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80034aa:	fa20 f002 	lsr.w	r0, r0, r2
 80034ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80034b2:	ea40 000e 	orr.w	r0, r0, lr
 80034b6:	fa21 f102 	lsr.w	r1, r1, r2
 80034ba:	4414      	add	r4, r2
 80034bc:	e6c1      	b.n	8003242 <__adddf3+0xe6>
 80034be:	bf00      	nop

080034c0 <__aeabi_dmul>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80034c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80034ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80034ce:	bf1d      	ittte	ne
 80034d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80034d4:	ea94 0f0c 	teqne	r4, ip
 80034d8:	ea95 0f0c 	teqne	r5, ip
 80034dc:	f000 f8de 	bleq	800369c <__aeabi_dmul+0x1dc>
 80034e0:	442c      	add	r4, r5
 80034e2:	ea81 0603 	eor.w	r6, r1, r3
 80034e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80034ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80034ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80034f2:	bf18      	it	ne
 80034f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80034f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80034fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003500:	d038      	beq.n	8003574 <__aeabi_dmul+0xb4>
 8003502:	fba0 ce02 	umull	ip, lr, r0, r2
 8003506:	f04f 0500 	mov.w	r5, #0
 800350a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800350e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003516:	f04f 0600 	mov.w	r6, #0
 800351a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800351e:	f09c 0f00 	teq	ip, #0
 8003522:	bf18      	it	ne
 8003524:	f04e 0e01 	orrne.w	lr, lr, #1
 8003528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800352c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003534:	d204      	bcs.n	8003540 <__aeabi_dmul+0x80>
 8003536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800353a:	416d      	adcs	r5, r5
 800353c:	eb46 0606 	adc.w	r6, r6, r6
 8003540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800354c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003558:	bf88      	it	hi
 800355a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800355e:	d81e      	bhi.n	800359e <__aeabi_dmul+0xde>
 8003560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003564:	bf08      	it	eq
 8003566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800356a:	f150 0000 	adcs.w	r0, r0, #0
 800356e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003572:	bd70      	pop	{r4, r5, r6, pc}
 8003574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003578:	ea46 0101 	orr.w	r1, r6, r1
 800357c:	ea40 0002 	orr.w	r0, r0, r2
 8003580:	ea81 0103 	eor.w	r1, r1, r3
 8003584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003588:	bfc2      	ittt	gt
 800358a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800358e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003592:	bd70      	popgt	{r4, r5, r6, pc}
 8003594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003598:	f04f 0e00 	mov.w	lr, #0
 800359c:	3c01      	subs	r4, #1
 800359e:	f300 80ab 	bgt.w	80036f8 <__aeabi_dmul+0x238>
 80035a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80035a6:	bfde      	ittt	le
 80035a8:	2000      	movle	r0, #0
 80035aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80035ae:	bd70      	pople	{r4, r5, r6, pc}
 80035b0:	f1c4 0400 	rsb	r4, r4, #0
 80035b4:	3c20      	subs	r4, #32
 80035b6:	da35      	bge.n	8003624 <__aeabi_dmul+0x164>
 80035b8:	340c      	adds	r4, #12
 80035ba:	dc1b      	bgt.n	80035f4 <__aeabi_dmul+0x134>
 80035bc:	f104 0414 	add.w	r4, r4, #20
 80035c0:	f1c4 0520 	rsb	r5, r4, #32
 80035c4:	fa00 f305 	lsl.w	r3, r0, r5
 80035c8:	fa20 f004 	lsr.w	r0, r0, r4
 80035cc:	fa01 f205 	lsl.w	r2, r1, r5
 80035d0:	ea40 0002 	orr.w	r0, r0, r2
 80035d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80035d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80035dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80035e0:	fa21 f604 	lsr.w	r6, r1, r4
 80035e4:	eb42 0106 	adc.w	r1, r2, r6
 80035e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80035ec:	bf08      	it	eq
 80035ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
 80035f4:	f1c4 040c 	rsb	r4, r4, #12
 80035f8:	f1c4 0520 	rsb	r5, r4, #32
 80035fc:	fa00 f304 	lsl.w	r3, r0, r4
 8003600:	fa20 f005 	lsr.w	r0, r0, r5
 8003604:	fa01 f204 	lsl.w	r2, r1, r4
 8003608:	ea40 0002 	orr.w	r0, r0, r2
 800360c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003614:	f141 0100 	adc.w	r1, r1, #0
 8003618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800361c:	bf08      	it	eq
 800361e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	f1c4 0520 	rsb	r5, r4, #32
 8003628:	fa00 f205 	lsl.w	r2, r0, r5
 800362c:	ea4e 0e02 	orr.w	lr, lr, r2
 8003630:	fa20 f304 	lsr.w	r3, r0, r4
 8003634:	fa01 f205 	lsl.w	r2, r1, r5
 8003638:	ea43 0302 	orr.w	r3, r3, r2
 800363c:	fa21 f004 	lsr.w	r0, r1, r4
 8003640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003644:	fa21 f204 	lsr.w	r2, r1, r4
 8003648:	ea20 0002 	bic.w	r0, r0, r2
 800364c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003654:	bf08      	it	eq
 8003656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800365a:	bd70      	pop	{r4, r5, r6, pc}
 800365c:	f094 0f00 	teq	r4, #0
 8003660:	d10f      	bne.n	8003682 <__aeabi_dmul+0x1c2>
 8003662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003666:	0040      	lsls	r0, r0, #1
 8003668:	eb41 0101 	adc.w	r1, r1, r1
 800366c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003670:	bf08      	it	eq
 8003672:	3c01      	subeq	r4, #1
 8003674:	d0f7      	beq.n	8003666 <__aeabi_dmul+0x1a6>
 8003676:	ea41 0106 	orr.w	r1, r1, r6
 800367a:	f095 0f00 	teq	r5, #0
 800367e:	bf18      	it	ne
 8003680:	4770      	bxne	lr
 8003682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003686:	0052      	lsls	r2, r2, #1
 8003688:	eb43 0303 	adc.w	r3, r3, r3
 800368c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003690:	bf08      	it	eq
 8003692:	3d01      	subeq	r5, #1
 8003694:	d0f7      	beq.n	8003686 <__aeabi_dmul+0x1c6>
 8003696:	ea43 0306 	orr.w	r3, r3, r6
 800369a:	4770      	bx	lr
 800369c:	ea94 0f0c 	teq	r4, ip
 80036a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80036a4:	bf18      	it	ne
 80036a6:	ea95 0f0c 	teqne	r5, ip
 80036aa:	d00c      	beq.n	80036c6 <__aeabi_dmul+0x206>
 80036ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80036b0:	bf18      	it	ne
 80036b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80036b6:	d1d1      	bne.n	800365c <__aeabi_dmul+0x19c>
 80036b8:	ea81 0103 	eor.w	r1, r1, r3
 80036bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80036c0:	f04f 0000 	mov.w	r0, #0
 80036c4:	bd70      	pop	{r4, r5, r6, pc}
 80036c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80036ca:	bf06      	itte	eq
 80036cc:	4610      	moveq	r0, r2
 80036ce:	4619      	moveq	r1, r3
 80036d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80036d4:	d019      	beq.n	800370a <__aeabi_dmul+0x24a>
 80036d6:	ea94 0f0c 	teq	r4, ip
 80036da:	d102      	bne.n	80036e2 <__aeabi_dmul+0x222>
 80036dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80036e0:	d113      	bne.n	800370a <__aeabi_dmul+0x24a>
 80036e2:	ea95 0f0c 	teq	r5, ip
 80036e6:	d105      	bne.n	80036f4 <__aeabi_dmul+0x234>
 80036e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80036ec:	bf1c      	itt	ne
 80036ee:	4610      	movne	r0, r2
 80036f0:	4619      	movne	r1, r3
 80036f2:	d10a      	bne.n	800370a <__aeabi_dmul+0x24a>
 80036f4:	ea81 0103 	eor.w	r1, r1, r3
 80036f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80036fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003704:	f04f 0000 	mov.w	r0, #0
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800370e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003712:	bd70      	pop	{r4, r5, r6, pc}

08003714 <__aeabi_ddiv>:
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800371a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800371e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003722:	bf1d      	ittte	ne
 8003724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003728:	ea94 0f0c 	teqne	r4, ip
 800372c:	ea95 0f0c 	teqne	r5, ip
 8003730:	f000 f8a7 	bleq	8003882 <__aeabi_ddiv+0x16e>
 8003734:	eba4 0405 	sub.w	r4, r4, r5
 8003738:	ea81 0e03 	eor.w	lr, r1, r3
 800373c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003744:	f000 8088 	beq.w	8003858 <__aeabi_ddiv+0x144>
 8003748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800374c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800375c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800376c:	429d      	cmp	r5, r3
 800376e:	bf08      	it	eq
 8003770:	4296      	cmpeq	r6, r2
 8003772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800377a:	d202      	bcs.n	8003782 <__aeabi_ddiv+0x6e>
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003782:	1ab6      	subs	r6, r6, r2
 8003784:	eb65 0503 	sbc.w	r5, r5, r3
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	ea4f 0232 	mov.w	r2, r2, rrx
 800378e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003796:	ebb6 0e02 	subs.w	lr, r6, r2
 800379a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800379e:	bf22      	ittt	cs
 80037a0:	1ab6      	subcs	r6, r6, r2
 80037a2:	4675      	movcs	r5, lr
 80037a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80037ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80037b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80037b6:	bf22      	ittt	cs
 80037b8:	1ab6      	subcs	r6, r6, r2
 80037ba:	4675      	movcs	r5, lr
 80037bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80037c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80037ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80037ce:	bf22      	ittt	cs
 80037d0:	1ab6      	subcs	r6, r6, r2
 80037d2:	4675      	movcs	r5, lr
 80037d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	ea4f 0232 	mov.w	r2, r2, rrx
 80037de:	ebb6 0e02 	subs.w	lr, r6, r2
 80037e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80037e6:	bf22      	ittt	cs
 80037e8:	1ab6      	subcs	r6, r6, r2
 80037ea:	4675      	movcs	r5, lr
 80037ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80037f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80037f4:	d018      	beq.n	8003828 <__aeabi_ddiv+0x114>
 80037f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80037fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80037fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800380a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800380e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003812:	d1c0      	bne.n	8003796 <__aeabi_ddiv+0x82>
 8003814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003818:	d10b      	bne.n	8003832 <__aeabi_ddiv+0x11e>
 800381a:	ea41 0100 	orr.w	r1, r1, r0
 800381e:	f04f 0000 	mov.w	r0, #0
 8003822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003826:	e7b6      	b.n	8003796 <__aeabi_ddiv+0x82>
 8003828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800382c:	bf04      	itt	eq
 800382e:	4301      	orreq	r1, r0
 8003830:	2000      	moveq	r0, #0
 8003832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003836:	bf88      	it	hi
 8003838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800383c:	f63f aeaf 	bhi.w	800359e <__aeabi_dmul+0xde>
 8003840:	ebb5 0c03 	subs.w	ip, r5, r3
 8003844:	bf04      	itt	eq
 8003846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800384a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800384e:	f150 0000 	adcs.w	r0, r0, #0
 8003852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800385c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003864:	bfc2      	ittt	gt
 8003866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800386a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800386e:	bd70      	popgt	{r4, r5, r6, pc}
 8003870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003874:	f04f 0e00 	mov.w	lr, #0
 8003878:	3c01      	subs	r4, #1
 800387a:	e690      	b.n	800359e <__aeabi_dmul+0xde>
 800387c:	ea45 0e06 	orr.w	lr, r5, r6
 8003880:	e68d      	b.n	800359e <__aeabi_dmul+0xde>
 8003882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003886:	ea94 0f0c 	teq	r4, ip
 800388a:	bf08      	it	eq
 800388c:	ea95 0f0c 	teqeq	r5, ip
 8003890:	f43f af3b 	beq.w	800370a <__aeabi_dmul+0x24a>
 8003894:	ea94 0f0c 	teq	r4, ip
 8003898:	d10a      	bne.n	80038b0 <__aeabi_ddiv+0x19c>
 800389a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800389e:	f47f af34 	bne.w	800370a <__aeabi_dmul+0x24a>
 80038a2:	ea95 0f0c 	teq	r5, ip
 80038a6:	f47f af25 	bne.w	80036f4 <__aeabi_dmul+0x234>
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	e72c      	b.n	800370a <__aeabi_dmul+0x24a>
 80038b0:	ea95 0f0c 	teq	r5, ip
 80038b4:	d106      	bne.n	80038c4 <__aeabi_ddiv+0x1b0>
 80038b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80038ba:	f43f aefd 	beq.w	80036b8 <__aeabi_dmul+0x1f8>
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	e722      	b.n	800370a <__aeabi_dmul+0x24a>
 80038c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80038c8:	bf18      	it	ne
 80038ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80038ce:	f47f aec5 	bne.w	800365c <__aeabi_dmul+0x19c>
 80038d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80038d6:	f47f af0d 	bne.w	80036f4 <__aeabi_dmul+0x234>
 80038da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80038de:	f47f aeeb 	bne.w	80036b8 <__aeabi_dmul+0x1f8>
 80038e2:	e712      	b.n	800370a <__aeabi_dmul+0x24a>

080038e4 <__aeabi_d2iz>:
 80038e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80038e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80038ec:	d215      	bcs.n	800391a <__aeabi_d2iz+0x36>
 80038ee:	d511      	bpl.n	8003914 <__aeabi_d2iz+0x30>
 80038f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80038f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80038f8:	d912      	bls.n	8003920 <__aeabi_d2iz+0x3c>
 80038fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80038fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003906:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800390a:	fa23 f002 	lsr.w	r0, r3, r2
 800390e:	bf18      	it	ne
 8003910:	4240      	negne	r0, r0
 8003912:	4770      	bx	lr
 8003914:	f04f 0000 	mov.w	r0, #0
 8003918:	4770      	bx	lr
 800391a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800391e:	d105      	bne.n	800392c <__aeabi_d2iz+0x48>
 8003920:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003924:	bf08      	it	eq
 8003926:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800392a:	4770      	bx	lr
 800392c:	f04f 0000 	mov.w	r0, #0
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop

08003934 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <HAL_InitTick+0x24>)
{
 8003936:	b510      	push	{r4, lr}
 8003938:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003940:	fbb0 f0f3 	udiv	r0, r0, r3
 8003944:	f000 fa34 	bl	8003db0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8003948:	2200      	movs	r2, #0
 800394a:	4621      	mov	r1, r4
 800394c:	f04f 30ff 	mov.w	r0, #4294967295
 8003950:	f000 f9fa 	bl	8003d48 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8003954:	2000      	movs	r0, #0
 8003956:	bd10      	pop	{r4, pc}
 8003958:	20000000 	.word	0x20000000

0800395c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800395c:	4a07      	ldr	r2, [pc, #28]	; (800397c <HAL_Init+0x20>)
{
 800395e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003960:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003962:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003964:	f043 0310 	orr.w	r3, r3, #16
 8003968:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800396a:	f000 f9db 	bl	8003d24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800396e:	2000      	movs	r0, #0
 8003970:	f7ff ffe0 	bl	8003934 <HAL_InitTick>
  HAL_MspInit();
 8003974:	f001 f8c6 	bl	8004b04 <HAL_MspInit>
}
 8003978:	2000      	movs	r0, #0
 800397a:	bd08      	pop	{r3, pc}
 800397c:	40022000 	.word	0x40022000

08003980 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003980:	4a02      	ldr	r2, [pc, #8]	; (800398c <HAL_IncTick+0xc>)
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	3301      	adds	r3, #1
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000090 	.word	0x20000090

08003990 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003990:	4b01      	ldr	r3, [pc, #4]	; (8003998 <HAL_GetTick+0x8>)
 8003992:	6818      	ldr	r0, [r3, #0]
}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000090 	.word	0x20000090

0800399c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800399c:	6803      	ldr	r3, [r0, #0]
 800399e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80039a4:	2300      	movs	r3, #0
{ 
 80039a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80039a8:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d074      	beq.n	8003a9c <HAL_ADC_ConfigChannel+0xf8>
 80039b2:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039b4:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80039b6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80039ba:	2d06      	cmp	r5, #6
 80039bc:	6802      	ldr	r2, [r0, #0]
 80039be:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80039c2:	680c      	ldr	r4, [r1, #0]
 80039c4:	d825      	bhi.n	8003a12 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039c6:	442b      	add	r3, r5
 80039c8:	251f      	movs	r5, #31
 80039ca:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80039cc:	3b05      	subs	r3, #5
 80039ce:	409d      	lsls	r5, r3
 80039d0:	ea26 0505 	bic.w	r5, r6, r5
 80039d4:	fa04 f303 	lsl.w	r3, r4, r3
 80039d8:	432b      	orrs	r3, r5
 80039da:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039dc:	2c09      	cmp	r4, #9
 80039de:	ea4f 0344 	mov.w	r3, r4, lsl #1
 80039e2:	688d      	ldr	r5, [r1, #8]
 80039e4:	d92f      	bls.n	8003a46 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039e6:	2607      	movs	r6, #7
 80039e8:	4423      	add	r3, r4
 80039ea:	68d1      	ldr	r1, [r2, #12]
 80039ec:	3b1e      	subs	r3, #30
 80039ee:	409e      	lsls	r6, r3
 80039f0:	ea21 0106 	bic.w	r1, r1, r6
 80039f4:	fa05 f303 	lsl.w	r3, r5, r3
 80039f8:	430b      	orrs	r3, r1
 80039fa:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80039fc:	f1a4 0310 	sub.w	r3, r4, #16
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d92b      	bls.n	8003a5c <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a04:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a06:	2200      	movs	r2, #0
 8003a08:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	b002      	add	sp, #8
 8003a10:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8003a12:	2d0c      	cmp	r5, #12
 8003a14:	d80b      	bhi.n	8003a2e <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003a16:	442b      	add	r3, r5
 8003a18:	251f      	movs	r5, #31
 8003a1a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8003a1c:	3b23      	subs	r3, #35	; 0x23
 8003a1e:	409d      	lsls	r5, r3
 8003a20:	ea26 0505 	bic.w	r5, r6, r5
 8003a24:	fa04 f303 	lsl.w	r3, r4, r3
 8003a28:	432b      	orrs	r3, r5
 8003a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2c:	e7d6      	b.n	80039dc <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a2e:	442b      	add	r3, r5
 8003a30:	251f      	movs	r5, #31
 8003a32:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8003a34:	3b41      	subs	r3, #65	; 0x41
 8003a36:	409d      	lsls	r5, r3
 8003a38:	ea26 0505 	bic.w	r5, r6, r5
 8003a3c:	fa04 f303 	lsl.w	r3, r4, r3
 8003a40:	432b      	orrs	r3, r5
 8003a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a44:	e7ca      	b.n	80039dc <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a46:	2607      	movs	r6, #7
 8003a48:	6911      	ldr	r1, [r2, #16]
 8003a4a:	4423      	add	r3, r4
 8003a4c:	409e      	lsls	r6, r3
 8003a4e:	ea21 0106 	bic.w	r1, r1, r6
 8003a52:	fa05 f303 	lsl.w	r3, r5, r3
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6113      	str	r3, [r2, #16]
 8003a5a:	e7cf      	b.n	80039fc <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8003a5c:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_ADC_ConfigChannel+0xfc>)
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d116      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a62:	6893      	ldr	r3, [r2, #8]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	d4cd      	bmi.n	8003a04 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a68:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003a6a:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a70:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003a72:	d1c7      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_ADC_ConfigChannel+0x100>)
 8003a76:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <HAL_ADC_ConfigChannel+0x104>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a7e:	230a      	movs	r3, #10
 8003a80:	4353      	muls	r3, r2
            wait_loop_index--;
 8003a82:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003a84:	9b01      	ldr	r3, [sp, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0bc      	beq.n	8003a04 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8003a8a:	9b01      	ldr	r3, [sp, #4]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	e7f8      	b.n	8003a82 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003a92:	f043 0320 	orr.w	r3, r3, #32
 8003a96:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e7b4      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e7b5      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x68>
 8003aa0:	40012400 	.word	0x40012400
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	000f4240 	.word	0x000f4240

08003aac <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8003aac:	2300      	movs	r3, #0
{
 8003aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8003ab0:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ab2:	6803      	ldr	r3, [r0, #0]
{
 8003ab4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	07d2      	lsls	r2, r2, #31
 8003aba:	d502      	bpl.n	8003ac2 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003abc:	2000      	movs	r0, #0
}
 8003abe:	b002      	add	sp, #8
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <ADC_Enable+0x68>)
 8003acc:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <ADC_Enable+0x6c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8003ad4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003ad6:	9b01      	ldr	r3, [sp, #4]
 8003ad8:	b9c3      	cbnz	r3, 8003b0c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8003ada:	f7ff ff59 	bl	8003990 <HAL_GetTick>
 8003ade:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	689d      	ldr	r5, [r3, #8]
 8003ae4:	f015 0501 	ands.w	r5, r5, #1
 8003ae8:	d1e8      	bne.n	8003abc <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003aea:	f7ff ff51 	bl	8003990 <HAL_GetTick>
 8003aee:	1b80      	subs	r0, r0, r6
 8003af0:	2802      	cmp	r0, #2
 8003af2:	d9f5      	bls.n	8003ae0 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8003af6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afa:	f043 0310 	orr.w	r3, r3, #16
 8003afe:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8003b02:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b0a:	e7d8      	b.n	8003abe <ADC_Enable+0x12>
      wait_loop_index--;
 8003b0c:	9b01      	ldr	r3, [sp, #4]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	e7e0      	b.n	8003ad4 <ADC_Enable+0x28>
 8003b12:	bf00      	nop
 8003b14:	20000000 	.word	0x20000000
 8003b18:	000f4240 	.word	0x000f4240

08003b1c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8003b1c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8003b20:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8003b22:	2b01      	cmp	r3, #1
{
 8003b24:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003b26:	d054      	beq.n	8003bd2 <HAL_ADC_Start+0xb6>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8003b2e:	f7ff ffbd 	bl	8003aac <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d149      	bne.n	8003bca <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8003b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b38:	4a27      	ldr	r2, [pc, #156]	; (8003bd8 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3e:	f023 0301 	bic.w	r3, r3, #1
 8003b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b46:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d104      	bne.n	8003b58 <HAL_ADC_Start+0x3c>
 8003b4e:	4923      	ldr	r1, [pc, #140]	; (8003bdc <HAL_ADC_Start+0xc0>)
 8003b50:	684a      	ldr	r2, [r1, #4]
 8003b52:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8003b56:	d12e      	bne.n	8003bb6 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b5a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003b5e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b60:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003b62:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b64:	bf41      	itttt	mi
 8003b66:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8003b68:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8003b6c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8003b70:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b78:	bf1c      	itt	ne
 8003b7a:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8003b7c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003b80:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8003b82:	2200      	movs	r2, #0
 8003b84:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003b88:	f06f 0202 	mvn.w	r2, #2
 8003b8c:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003b94:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8003b98:	d113      	bne.n	8003bc2 <HAL_ADC_Start+0xa6>
 8003b9a:	4a0f      	ldr	r2, [pc, #60]	; (8003bd8 <HAL_ADC_Start+0xbc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d105      	bne.n	8003bac <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003ba0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8003ba4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003ba6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8003baa:	d10a      	bne.n	8003bc2 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bb6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003bb8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003bbc:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003bbe:	684a      	ldr	r2, [r1, #4]
 8003bc0:	e7cf      	b.n	8003b62 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003bc8:	e7f3      	b.n	8003bb2 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003bd0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003bd2:	2002      	movs	r0, #2
}
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40012800 	.word	0x40012800
 8003bdc:	40012400 	.word	0x40012400

08003be0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003be0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003be2:	6803      	ldr	r3, [r0, #0]
{
 8003be4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	07d2      	lsls	r2, r2, #31
 8003bea:	d401      	bmi.n	8003bf0 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bec:	2000      	movs	r0, #0
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	f022 0201 	bic.w	r2, r2, #1
 8003bf6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003bf8:	f7ff feca 	bl	8003990 <HAL_GetTick>
 8003bfc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	07db      	lsls	r3, r3, #31
 8003c04:	d5f2      	bpl.n	8003bec <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c06:	f7ff fec3 	bl	8003990 <HAL_GetTick>
 8003c0a:	1b40      	subs	r0, r0, r5
 8003c0c:	2802      	cmp	r0, #2
 8003c0e:	d9f6      	bls.n	8003bfe <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c12:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c14:	f043 0310 	orr.w	r3, r3, #16
 8003c18:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c22:	bd38      	pop	{r3, r4, r5, pc}

08003c24 <HAL_ADC_Init>:
{
 8003c24:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8003c26:	4604      	mov	r4, r0
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d071      	beq.n	8003d10 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003c2e:	b923      	cbnz	r3, 8003c3a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8003c30:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8003c32:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8003c36:	f000 ffad 	bl	8004b94 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f7ff ffd0 	bl	8003be0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c42:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8003c46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c48:	d164      	bne.n	8003d14 <HAL_ADC_Init+0xf0>
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d162      	bne.n	8003d14 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8003c4e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8003c50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8003c54:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8003c56:	f023 0302 	bic.w	r3, r3, #2
 8003c5a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8003c5e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003c60:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8003c62:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8003c64:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003c66:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8003c6a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003c6e:	d038      	beq.n	8003ce2 <HAL_ADC_Init+0xbe>
 8003c70:	2901      	cmp	r1, #1
 8003c72:	bf14      	ite	ne
 8003c74:	4606      	movne	r6, r0
 8003c76:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c7a:	6965      	ldr	r5, [r4, #20]
 8003c7c:	2d01      	cmp	r5, #1
 8003c7e:	d107      	bne.n	8003c90 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d130      	bne.n	8003ce6 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003c84:	69a3      	ldr	r3, [r4, #24]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8003c8c:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8003c90:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003c92:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8003c96:	685d      	ldr	r5, [r3, #4]
 8003c98:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8003c9c:	ea45 0506 	orr.w	r5, r5, r6
 8003ca0:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003ca2:	689e      	ldr	r6, [r3, #8]
 8003ca4:	4d1d      	ldr	r5, [pc, #116]	; (8003d1c <HAL_ADC_Init+0xf8>)
 8003ca6:	ea05 0506 	and.w	r5, r5, r6
 8003caa:	ea45 0502 	orr.w	r5, r5, r2
 8003cae:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003cb0:	d001      	beq.n	8003cb6 <HAL_ADC_Init+0x92>
 8003cb2:	2901      	cmp	r1, #1
 8003cb4:	d120      	bne.n	8003cf8 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003cb6:	6921      	ldr	r1, [r4, #16]
 8003cb8:	3901      	subs	r1, #1
 8003cba:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8003cbc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003cbe:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8003cc2:	4329      	orrs	r1, r5
 8003cc4:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003cc6:	6899      	ldr	r1, [r3, #8]
 8003cc8:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_ADC_Init+0xfc>)
 8003cca:	400b      	ands	r3, r1
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d115      	bne.n	8003cfc <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8003cd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003ce2:	460e      	mov	r6, r1
 8003ce4:	e7c9      	b.n	8003c7a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ce8:	f043 0320 	orr.w	r3, r3, #32
 8003cec:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cf6:	e7cb      	b.n	8003c90 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	e7df      	b.n	8003cbc <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8003cfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003cfe:	f023 0312 	bic.w	r3, r3, #18
 8003d02:	f043 0310 	orr.w	r3, r3, #16
 8003d06:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8003d10:	2001      	movs	r0, #1
}
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d14:	f043 0310 	orr.w	r3, r3, #16
 8003d18:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d1a:	e7f9      	b.n	8003d10 <HAL_ADC_Init+0xec>
 8003d1c:	ffe1f7fd 	.word	0xffe1f7fd
 8003d20:	ff1f0efe 	.word	0xff1f0efe

08003d24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d24:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003d26:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d28:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003d2a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d32:	041b      	lsls	r3, r3, #16
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003d3e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003d40:	60d3      	str	r3, [r2, #12]
 8003d42:	4770      	bx	lr
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d48:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d4a:	b530      	push	{r4, r5, lr}
 8003d4c:	68dc      	ldr	r4, [r3, #12]
 8003d4e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d52:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d56:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	bf28      	it	cs
 8003d5c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d5e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d60:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d64:	bf98      	it	ls
 8003d66:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	fa05 f303 	lsl.w	r3, r5, r3
 8003d6c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d70:	bf88      	it	hi
 8003d72:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	4019      	ands	r1, r3
 8003d76:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d78:	fa05 f404 	lsl.w	r4, r5, r4
 8003d7c:	3c01      	subs	r4, #1
 8003d7e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8003d80:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d82:	ea42 0201 	orr.w	r2, r2, r1
 8003d86:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8a:	bfaf      	iteee	ge
 8003d8c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d90:	4b06      	ldrlt	r3, [pc, #24]	; (8003dac <HAL_NVIC_SetPriority+0x64>)
 8003d92:	f000 000f 	andlt.w	r0, r0, #15
 8003d96:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d98:	bfa5      	ittet	ge
 8003d9a:	b2d2      	uxtbge	r2, r2
 8003d9c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8003da6:	bd30      	pop	{r4, r5, pc}
 8003da8:	e000ed00 	.word	0xe000ed00
 8003dac:	e000ed14 	.word	0xe000ed14

08003db0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db0:	3801      	subs	r0, #1
 8003db2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003db6:	d20a      	bcs.n	8003dce <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbc:	4a06      	ldr	r2, [pc, #24]	; (8003dd8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dbe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dc6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003dce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	e000e010 	.word	0xe000e010
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003dde:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	bf0c      	ite	eq
 8003de4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003de8:	f022 0204 	bicne.w	r2, r2, #4
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	4770      	bx	lr
 8003df0:	e000e010 	.word	0xe000e010

08003df4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003df4:	4770      	bx	lr

08003df6 <HAL_SYSTICK_IRQHandler>:
{
 8003df6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003df8:	f7ff fffc 	bl	8003df4 <HAL_SYSTICK_Callback>
 8003dfc:	bd08      	pop	{r3, pc}
	...

08003e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8003e04:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003e06:	4616      	mov	r6, r2
 8003e08:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e0a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8003fb0 <HAL_GPIO_Init+0x1b0>
 8003e0e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8003fb4 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8003e12:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e16:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8003e18:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e1c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8003e20:	45a0      	cmp	r8, r4
 8003e22:	d17f      	bne.n	8003f24 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8003e24:	684d      	ldr	r5, [r1, #4]
 8003e26:	2d12      	cmp	r5, #18
 8003e28:	f000 80af 	beq.w	8003f8a <HAL_GPIO_Init+0x18a>
 8003e2c:	f200 8088 	bhi.w	8003f40 <HAL_GPIO_Init+0x140>
 8003e30:	2d02      	cmp	r5, #2
 8003e32:	f000 80a7 	beq.w	8003f84 <HAL_GPIO_Init+0x184>
 8003e36:	d87c      	bhi.n	8003f32 <HAL_GPIO_Init+0x132>
 8003e38:	2d00      	cmp	r5, #0
 8003e3a:	f000 808e 	beq.w	8003f5a <HAL_GPIO_Init+0x15a>
 8003e3e:	2d01      	cmp	r5, #1
 8003e40:	f000 809e 	beq.w	8003f80 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8003e44:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e48:	2cff      	cmp	r4, #255	; 0xff
 8003e4a:	bf93      	iteet	ls
 8003e4c:	4682      	movls	sl, r0
 8003e4e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8003e52:	3d08      	subhi	r5, #8
 8003e54:	f8d0 b000 	ldrls.w	fp, [r0]
 8003e58:	bf92      	itee	ls
 8003e5a:	00b5      	lslls	r5, r6, #2
 8003e5c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8003e60:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8003e62:	fa09 f805 	lsl.w	r8, r9, r5
 8003e66:	ea2b 0808 	bic.w	r8, fp, r8
 8003e6a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e6e:	bf88      	it	hi
 8003e70:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8003e74:	ea48 0505 	orr.w	r5, r8, r5
 8003e78:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003e7c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003e80:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003e84:	d04e      	beq.n	8003f24 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e86:	4d47      	ldr	r5, [pc, #284]	; (8003fa4 <HAL_GPIO_Init+0x1a4>)
 8003e88:	4f46      	ldr	r7, [pc, #280]	; (8003fa4 <HAL_GPIO_Init+0x1a4>)
 8003e8a:	69ad      	ldr	r5, [r5, #24]
 8003e8c:	f026 0803 	bic.w	r8, r6, #3
 8003e90:	f045 0501 	orr.w	r5, r5, #1
 8003e94:	61bd      	str	r5, [r7, #24]
 8003e96:	69bd      	ldr	r5, [r7, #24]
 8003e98:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003e9c:	f005 0501 	and.w	r5, r5, #1
 8003ea0:	9501      	str	r5, [sp, #4]
 8003ea2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003ea6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003eaa:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003eac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8003eb0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003eb4:	fa09 f90b 	lsl.w	r9, r9, fp
 8003eb8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ebc:	4d3a      	ldr	r5, [pc, #232]	; (8003fa8 <HAL_GPIO_Init+0x1a8>)
 8003ebe:	42a8      	cmp	r0, r5
 8003ec0:	d068      	beq.n	8003f94 <HAL_GPIO_Init+0x194>
 8003ec2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ec6:	42a8      	cmp	r0, r5
 8003ec8:	d066      	beq.n	8003f98 <HAL_GPIO_Init+0x198>
 8003eca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ece:	42a8      	cmp	r0, r5
 8003ed0:	d064      	beq.n	8003f9c <HAL_GPIO_Init+0x19c>
 8003ed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ed6:	42a8      	cmp	r0, r5
 8003ed8:	bf0c      	ite	eq
 8003eda:	2503      	moveq	r5, #3
 8003edc:	2504      	movne	r5, #4
 8003ede:	fa05 f50b 	lsl.w	r5, r5, fp
 8003ee2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8003ee6:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8003eea:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eec:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8003ef0:	bf14      	ite	ne
 8003ef2:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8003ef4:	43a5      	biceq	r5, r4
 8003ef6:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8003ef8:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003efa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8003efe:	bf14      	ite	ne
 8003f00:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8003f02:	43a5      	biceq	r5, r4
 8003f04:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8003f06:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f08:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8003f0c:	bf14      	ite	ne
 8003f0e:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8003f10:	43a5      	biceq	r5, r4
 8003f12:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8003f14:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f16:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8003f1a:	bf14      	ite	ne
 8003f1c:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8003f1e:	ea25 0404 	biceq.w	r4, r5, r4
 8003f22:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003f24:	3601      	adds	r6, #1
 8003f26:	2e10      	cmp	r6, #16
 8003f28:	f47f af73 	bne.w	8003e12 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8003f2c:	b003      	add	sp, #12
 8003f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8003f32:	2d03      	cmp	r5, #3
 8003f34:	d022      	beq.n	8003f7c <HAL_GPIO_Init+0x17c>
 8003f36:	2d11      	cmp	r5, #17
 8003f38:	d184      	bne.n	8003e44 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f3a:	68ca      	ldr	r2, [r1, #12]
 8003f3c:	3204      	adds	r2, #4
          break;
 8003f3e:	e781      	b.n	8003e44 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8003f40:	4f1a      	ldr	r7, [pc, #104]	; (8003fac <HAL_GPIO_Init+0x1ac>)
 8003f42:	42bd      	cmp	r5, r7
 8003f44:	d009      	beq.n	8003f5a <HAL_GPIO_Init+0x15a>
 8003f46:	d812      	bhi.n	8003f6e <HAL_GPIO_Init+0x16e>
 8003f48:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8003fb8 <HAL_GPIO_Init+0x1b8>
 8003f4c:	454d      	cmp	r5, r9
 8003f4e:	d004      	beq.n	8003f5a <HAL_GPIO_Init+0x15a>
 8003f50:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8003f54:	454d      	cmp	r5, r9
 8003f56:	f47f af75 	bne.w	8003e44 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8003f5a:	688a      	ldr	r2, [r1, #8]
 8003f5c:	b1c2      	cbz	r2, 8003f90 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8003f5e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8003f60:	bf0c      	ite	eq
 8003f62:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8003f66:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	e76a      	b.n	8003e44 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8003f6e:	4575      	cmp	r5, lr
 8003f70:	d0f3      	beq.n	8003f5a <HAL_GPIO_Init+0x15a>
 8003f72:	4565      	cmp	r5, ip
 8003f74:	d0f1      	beq.n	8003f5a <HAL_GPIO_Init+0x15a>
 8003f76:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003fbc <HAL_GPIO_Init+0x1bc>
 8003f7a:	e7eb      	b.n	8003f54 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	e761      	b.n	8003e44 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f80:	68ca      	ldr	r2, [r1, #12]
          break;
 8003f82:	e75f      	b.n	8003e44 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f84:	68ca      	ldr	r2, [r1, #12]
 8003f86:	3208      	adds	r2, #8
          break;
 8003f88:	e75c      	b.n	8003e44 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f8a:	68ca      	ldr	r2, [r1, #12]
 8003f8c:	320c      	adds	r2, #12
          break;
 8003f8e:	e759      	b.n	8003e44 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f90:	2204      	movs	r2, #4
 8003f92:	e757      	b.n	8003e44 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f94:	2500      	movs	r5, #0
 8003f96:	e7a2      	b.n	8003ede <HAL_GPIO_Init+0xde>
 8003f98:	2501      	movs	r5, #1
 8003f9a:	e7a0      	b.n	8003ede <HAL_GPIO_Init+0xde>
 8003f9c:	2502      	movs	r5, #2
 8003f9e:	e79e      	b.n	8003ede <HAL_GPIO_Init+0xde>
 8003fa0:	40010400 	.word	0x40010400
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40010800 	.word	0x40010800
 8003fac:	10210000 	.word	0x10210000
 8003fb0:	10310000 	.word	0x10310000
 8003fb4:	10320000 	.word	0x10320000
 8003fb8:	10110000 	.word	0x10110000
 8003fbc:	10220000 	.word	0x10220000

08003fc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fc0:	b10a      	cbz	r2, 8003fc6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fc2:	6101      	str	r1, [r0, #16]
 8003fc4:	4770      	bx	lr
 8003fc6:	0409      	lsls	r1, r1, #16
 8003fc8:	e7fb      	b.n	8003fc2 <HAL_GPIO_WritePin+0x2>
	...

08003fcc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fcc:	6803      	ldr	r3, [r0, #0]
{
 8003fce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd2:	07db      	lsls	r3, r3, #31
{
 8003fd4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd6:	d410      	bmi.n	8003ffa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	079f      	lsls	r7, r3, #30
 8003fdc:	d45e      	bmi.n	800409c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fde:	682b      	ldr	r3, [r5, #0]
 8003fe0:	0719      	lsls	r1, r3, #28
 8003fe2:	f100 8095 	bmi.w	8004110 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe6:	682b      	ldr	r3, [r5, #0]
 8003fe8:	075a      	lsls	r2, r3, #29
 8003fea:	f100 80bf 	bmi.w	800416c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fee:	69ea      	ldr	r2, [r5, #28]
 8003ff0:	2a00      	cmp	r2, #0
 8003ff2:	f040 812d 	bne.w	8004250 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e014      	b.n	8004024 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ffa:	4c90      	ldr	r4, [pc, #576]	; (800423c <HAL_RCC_OscConfig+0x270>)
 8003ffc:	6863      	ldr	r3, [r4, #4]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	2b04      	cmp	r3, #4
 8004004:	d007      	beq.n	8004016 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004006:	6863      	ldr	r3, [r4, #4]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b08      	cmp	r3, #8
 800400e:	d10c      	bne.n	800402a <HAL_RCC_OscConfig+0x5e>
 8004010:	6863      	ldr	r3, [r4, #4]
 8004012:	03de      	lsls	r6, r3, #15
 8004014:	d509      	bpl.n	800402a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	039c      	lsls	r4, r3, #14
 800401a:	d5dd      	bpl.n	8003fd8 <HAL_RCC_OscConfig+0xc>
 800401c:	686b      	ldr	r3, [r5, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1da      	bne.n	8003fd8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8004022:	2001      	movs	r0, #1
}
 8004024:	b002      	add	sp, #8
 8004026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402a:	686b      	ldr	r3, [r5, #4]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d110      	bne.n	8004054 <HAL_RCC_OscConfig+0x88>
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004038:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800403a:	f7ff fca9 	bl	8003990 <HAL_GetTick>
 800403e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	0398      	lsls	r0, r3, #14
 8004044:	d4c8      	bmi.n	8003fd8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004046:	f7ff fca3 	bl	8003990 <HAL_GetTick>
 800404a:	1b80      	subs	r0, r0, r6
 800404c:	2864      	cmp	r0, #100	; 0x64
 800404e:	d9f7      	bls.n	8004040 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8004050:	2003      	movs	r0, #3
 8004052:	e7e7      	b.n	8004024 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004054:	b99b      	cbnz	r3, 800407e <HAL_RCC_OscConfig+0xb2>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004064:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004066:	f7ff fc93 	bl	8003990 <HAL_GetTick>
 800406a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	0399      	lsls	r1, r3, #14
 8004070:	d5b2      	bpl.n	8003fd8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004072:	f7ff fc8d 	bl	8003990 <HAL_GetTick>
 8004076:	1b80      	subs	r0, r0, r6
 8004078:	2864      	cmp	r0, #100	; 0x64
 800407a:	d9f7      	bls.n	800406c <HAL_RCC_OscConfig+0xa0>
 800407c:	e7e8      	b.n	8004050 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	d103      	bne.n	800408e <HAL_RCC_OscConfig+0xc2>
 8004086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800408a:	6023      	str	r3, [r4, #0]
 800408c:	e7d1      	b.n	8004032 <HAL_RCC_OscConfig+0x66>
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409a:	e7cd      	b.n	8004038 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800409c:	4c67      	ldr	r4, [pc, #412]	; (800423c <HAL_RCC_OscConfig+0x270>)
 800409e:	6863      	ldr	r3, [r4, #4]
 80040a0:	f013 0f0c 	tst.w	r3, #12
 80040a4:	d007      	beq.n	80040b6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040a6:	6863      	ldr	r3, [r4, #4]
 80040a8:	f003 030c 	and.w	r3, r3, #12
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d110      	bne.n	80040d2 <HAL_RCC_OscConfig+0x106>
 80040b0:	6863      	ldr	r3, [r4, #4]
 80040b2:	03da      	lsls	r2, r3, #15
 80040b4:	d40d      	bmi.n	80040d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	079b      	lsls	r3, r3, #30
 80040ba:	d502      	bpl.n	80040c2 <HAL_RCC_OscConfig+0xf6>
 80040bc:	692b      	ldr	r3, [r5, #16]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d1af      	bne.n	8004022 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	696a      	ldr	r2, [r5, #20]
 80040c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80040ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	e785      	b.n	8003fde <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d2:	692a      	ldr	r2, [r5, #16]
 80040d4:	4b5a      	ldr	r3, [pc, #360]	; (8004240 <HAL_RCC_OscConfig+0x274>)
 80040d6:	b16a      	cbz	r2, 80040f4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80040dc:	f7ff fc58 	bl	8003990 <HAL_GetTick>
 80040e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	079f      	lsls	r7, r3, #30
 80040e6:	d4ec      	bmi.n	80040c2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e8:	f7ff fc52 	bl	8003990 <HAL_GetTick>
 80040ec:	1b80      	subs	r0, r0, r6
 80040ee:	2802      	cmp	r0, #2
 80040f0:	d9f7      	bls.n	80040e2 <HAL_RCC_OscConfig+0x116>
 80040f2:	e7ad      	b.n	8004050 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80040f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80040f6:	f7ff fc4b 	bl	8003990 <HAL_GetTick>
 80040fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	0798      	lsls	r0, r3, #30
 8004100:	f57f af6d 	bpl.w	8003fde <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004104:	f7ff fc44 	bl	8003990 <HAL_GetTick>
 8004108:	1b80      	subs	r0, r0, r6
 800410a:	2802      	cmp	r0, #2
 800410c:	d9f6      	bls.n	80040fc <HAL_RCC_OscConfig+0x130>
 800410e:	e79f      	b.n	8004050 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004110:	69aa      	ldr	r2, [r5, #24]
 8004112:	4c4a      	ldr	r4, [pc, #296]	; (800423c <HAL_RCC_OscConfig+0x270>)
 8004114:	4b4b      	ldr	r3, [pc, #300]	; (8004244 <HAL_RCC_OscConfig+0x278>)
 8004116:	b1da      	cbz	r2, 8004150 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800411c:	f7ff fc38 	bl	8003990 <HAL_GetTick>
 8004120:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004124:	079b      	lsls	r3, r3, #30
 8004126:	d50d      	bpl.n	8004144 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004128:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800412c:	4b46      	ldr	r3, [pc, #280]	; (8004248 <HAL_RCC_OscConfig+0x27c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	fbb3 f3f2 	udiv	r3, r3, r2
 8004134:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004136:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8004138:	9b01      	ldr	r3, [sp, #4]
 800413a:	1e5a      	subs	r2, r3, #1
 800413c:	9201      	str	r2, [sp, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f9      	bne.n	8004136 <HAL_RCC_OscConfig+0x16a>
 8004142:	e750      	b.n	8003fe6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004144:	f7ff fc24 	bl	8003990 <HAL_GetTick>
 8004148:	1b80      	subs	r0, r0, r6
 800414a:	2802      	cmp	r0, #2
 800414c:	d9e9      	bls.n	8004122 <HAL_RCC_OscConfig+0x156>
 800414e:	e77f      	b.n	8004050 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8004150:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004152:	f7ff fc1d 	bl	8003990 <HAL_GetTick>
 8004156:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800415a:	079f      	lsls	r7, r3, #30
 800415c:	f57f af43 	bpl.w	8003fe6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004160:	f7ff fc16 	bl	8003990 <HAL_GetTick>
 8004164:	1b80      	subs	r0, r0, r6
 8004166:	2802      	cmp	r0, #2
 8004168:	d9f6      	bls.n	8004158 <HAL_RCC_OscConfig+0x18c>
 800416a:	e771      	b.n	8004050 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416c:	4c33      	ldr	r4, [pc, #204]	; (800423c <HAL_RCC_OscConfig+0x270>)
 800416e:	69e3      	ldr	r3, [r4, #28]
 8004170:	00d8      	lsls	r0, r3, #3
 8004172:	d424      	bmi.n	80041be <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8004174:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004176:	69e3      	ldr	r3, [r4, #28]
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417c:	61e3      	str	r3, [r4, #28]
 800417e:	69e3      	ldr	r3, [r4, #28]
 8004180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004188:	4e30      	ldr	r6, [pc, #192]	; (800424c <HAL_RCC_OscConfig+0x280>)
 800418a:	6833      	ldr	r3, [r6, #0]
 800418c:	05d9      	lsls	r1, r3, #23
 800418e:	d518      	bpl.n	80041c2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004190:	68eb      	ldr	r3, [r5, #12]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d126      	bne.n	80041e4 <HAL_RCC_OscConfig+0x218>
 8004196:	6a23      	ldr	r3, [r4, #32]
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800419e:	f7ff fbf7 	bl	8003990 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80041a6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a8:	6a23      	ldr	r3, [r4, #32]
 80041aa:	079b      	lsls	r3, r3, #30
 80041ac:	d53f      	bpl.n	800422e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80041ae:	2f00      	cmp	r7, #0
 80041b0:	f43f af1d 	beq.w	8003fee <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b4:	69e3      	ldr	r3, [r4, #28]
 80041b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ba:	61e3      	str	r3, [r4, #28]
 80041bc:	e717      	b.n	8003fee <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80041be:	2700      	movs	r7, #0
 80041c0:	e7e2      	b.n	8004188 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041c2:	6833      	ldr	r3, [r6, #0]
 80041c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80041ca:	f7ff fbe1 	bl	8003990 <HAL_GetTick>
 80041ce:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	6833      	ldr	r3, [r6, #0]
 80041d2:	05da      	lsls	r2, r3, #23
 80041d4:	d4dc      	bmi.n	8004190 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d6:	f7ff fbdb 	bl	8003990 <HAL_GetTick>
 80041da:	eba0 0008 	sub.w	r0, r0, r8
 80041de:	2864      	cmp	r0, #100	; 0x64
 80041e0:	d9f6      	bls.n	80041d0 <HAL_RCC_OscConfig+0x204>
 80041e2:	e735      	b.n	8004050 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e4:	b9ab      	cbnz	r3, 8004212 <HAL_RCC_OscConfig+0x246>
 80041e6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	6223      	str	r3, [r4, #32]
 80041f2:	6a23      	ldr	r3, [r4, #32]
 80041f4:	f023 0304 	bic.w	r3, r3, #4
 80041f8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80041fa:	f7ff fbc9 	bl	8003990 <HAL_GetTick>
 80041fe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004200:	6a23      	ldr	r3, [r4, #32]
 8004202:	0798      	lsls	r0, r3, #30
 8004204:	d5d3      	bpl.n	80041ae <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7ff fbc3 	bl	8003990 <HAL_GetTick>
 800420a:	1b80      	subs	r0, r0, r6
 800420c:	4540      	cmp	r0, r8
 800420e:	d9f7      	bls.n	8004200 <HAL_RCC_OscConfig+0x234>
 8004210:	e71e      	b.n	8004050 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004212:	2b05      	cmp	r3, #5
 8004214:	6a23      	ldr	r3, [r4, #32]
 8004216:	d103      	bne.n	8004220 <HAL_RCC_OscConfig+0x254>
 8004218:	f043 0304 	orr.w	r3, r3, #4
 800421c:	6223      	str	r3, [r4, #32]
 800421e:	e7ba      	b.n	8004196 <HAL_RCC_OscConfig+0x1ca>
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	6223      	str	r3, [r4, #32]
 8004226:	6a23      	ldr	r3, [r4, #32]
 8004228:	f023 0304 	bic.w	r3, r3, #4
 800422c:	e7b6      	b.n	800419c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422e:	f7ff fbaf 	bl	8003990 <HAL_GetTick>
 8004232:	eba0 0008 	sub.w	r0, r0, r8
 8004236:	42b0      	cmp	r0, r6
 8004238:	d9b6      	bls.n	80041a8 <HAL_RCC_OscConfig+0x1dc>
 800423a:	e709      	b.n	8004050 <HAL_RCC_OscConfig+0x84>
 800423c:	40021000 	.word	0x40021000
 8004240:	42420000 	.word	0x42420000
 8004244:	42420480 	.word	0x42420480
 8004248:	20000000 	.word	0x20000000
 800424c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004250:	4c22      	ldr	r4, [pc, #136]	; (80042dc <HAL_RCC_OscConfig+0x310>)
 8004252:	6863      	ldr	r3, [r4, #4]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	f43f aee2 	beq.w	8004022 <HAL_RCC_OscConfig+0x56>
 800425e:	2300      	movs	r3, #0
 8004260:	4e1f      	ldr	r6, [pc, #124]	; (80042e0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004262:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8004264:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004266:	d12b      	bne.n	80042c0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8004268:	f7ff fb92 	bl	8003990 <HAL_GetTick>
 800426c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	0199      	lsls	r1, r3, #6
 8004272:	d41f      	bmi.n	80042b4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004274:	6a2b      	ldr	r3, [r5, #32]
 8004276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427a:	d105      	bne.n	8004288 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800427c:	6862      	ldr	r2, [r4, #4]
 800427e:	68a9      	ldr	r1, [r5, #8]
 8004280:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004284:	430a      	orrs	r2, r1
 8004286:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004288:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800428a:	6862      	ldr	r2, [r4, #4]
 800428c:	430b      	orrs	r3, r1
 800428e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004292:	4313      	orrs	r3, r2
 8004294:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004296:	2301      	movs	r3, #1
 8004298:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800429a:	f7ff fb79 	bl	8003990 <HAL_GetTick>
 800429e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	019a      	lsls	r2, r3, #6
 80042a4:	f53f aea7 	bmi.w	8003ff6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a8:	f7ff fb72 	bl	8003990 <HAL_GetTick>
 80042ac:	1b40      	subs	r0, r0, r5
 80042ae:	2802      	cmp	r0, #2
 80042b0:	d9f6      	bls.n	80042a0 <HAL_RCC_OscConfig+0x2d4>
 80042b2:	e6cd      	b.n	8004050 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b4:	f7ff fb6c 	bl	8003990 <HAL_GetTick>
 80042b8:	1bc0      	subs	r0, r0, r7
 80042ba:	2802      	cmp	r0, #2
 80042bc:	d9d7      	bls.n	800426e <HAL_RCC_OscConfig+0x2a2>
 80042be:	e6c7      	b.n	8004050 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80042c0:	f7ff fb66 	bl	8003990 <HAL_GetTick>
 80042c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	f57f ae94 	bpl.w	8003ff6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ce:	f7ff fb5f 	bl	8003990 <HAL_GetTick>
 80042d2:	1b40      	subs	r0, r0, r5
 80042d4:	2802      	cmp	r0, #2
 80042d6:	d9f6      	bls.n	80042c6 <HAL_RCC_OscConfig+0x2fa>
 80042d8:	e6ba      	b.n	8004050 <HAL_RCC_OscConfig+0x84>
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000
 80042e0:	42420060 	.word	0x42420060

080042e4 <HAL_RCC_GetSysClockFreq>:
{
 80042e4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 80042e8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042ea:	ac02      	add	r4, sp, #8
 80042ec:	f103 0510 	add.w	r5, r3, #16
 80042f0:	4622      	mov	r2, r4
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	3308      	adds	r3, #8
 80042f8:	c203      	stmia	r2!, {r0, r1}
 80042fa:	42ab      	cmp	r3, r5
 80042fc:	4614      	mov	r4, r2
 80042fe:	d1f7      	bne.n	80042f0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004300:	2301      	movs	r3, #1
 8004302:	f88d 3004 	strb.w	r3, [sp, #4]
 8004306:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8004308:	4912      	ldr	r1, [pc, #72]	; (8004354 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800430a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800430e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004310:	f003 020c 	and.w	r2, r3, #12
 8004314:	2a08      	cmp	r2, #8
 8004316:	d118      	bne.n	800434a <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004318:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800431c:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800431e:	bf48      	it	mi
 8004320:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004322:	a806      	add	r0, sp, #24
 8004324:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004326:	bf48      	it	mi
 8004328:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800432c:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004330:	bf41      	itttt	mi
 8004332:	aa06      	addmi	r2, sp, #24
 8004334:	189b      	addmi	r3, r3, r2
 8004336:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800433a:	4b07      	ldrmi	r3, [pc, #28]	; (8004358 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800433c:	bf54      	ite	pl
 800433e:	4b07      	ldrpl	r3, [pc, #28]	; (800435c <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8004340:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004344:	4358      	muls	r0, r3
}
 8004346:	b007      	add	sp, #28
 8004348:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 800434a:	4803      	ldr	r0, [pc, #12]	; (8004358 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800434c:	e7fb      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x62>
 800434e:	bf00      	nop
 8004350:	080055b8 	.word	0x080055b8
 8004354:	40021000 	.word	0x40021000
 8004358:	007a1200 	.word	0x007a1200
 800435c:	003d0900 	.word	0x003d0900

08004360 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004360:	4a4d      	ldr	r2, [pc, #308]	; (8004498 <HAL_RCC_ClockConfig+0x138>)
{
 8004362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004366:	6813      	ldr	r3, [r2, #0]
{
 8004368:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	428b      	cmp	r3, r1
{
 8004370:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004372:	d328      	bcc.n	80043c6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004374:	682a      	ldr	r2, [r5, #0]
 8004376:	0791      	lsls	r1, r2, #30
 8004378:	d432      	bmi.n	80043e0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437a:	07d2      	lsls	r2, r2, #31
 800437c:	d438      	bmi.n	80043f0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800437e:	4a46      	ldr	r2, [pc, #280]	; (8004498 <HAL_RCC_ClockConfig+0x138>)
 8004380:	6813      	ldr	r3, [r2, #0]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	429e      	cmp	r6, r3
 8004388:	d373      	bcc.n	8004472 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438a:	682a      	ldr	r2, [r5, #0]
 800438c:	4c43      	ldr	r4, [pc, #268]	; (800449c <HAL_RCC_ClockConfig+0x13c>)
 800438e:	f012 0f04 	tst.w	r2, #4
 8004392:	d179      	bne.n	8004488 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004394:	0713      	lsls	r3, r2, #28
 8004396:	d506      	bpl.n	80043a6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004398:	6863      	ldr	r3, [r4, #4]
 800439a:	692a      	ldr	r2, [r5, #16]
 800439c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80043a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80043a4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043a6:	f7ff ff9d 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 80043aa:	6863      	ldr	r3, [r4, #4]
 80043ac:	4a3c      	ldr	r2, [pc, #240]	; (80044a0 <HAL_RCC_ClockConfig+0x140>)
 80043ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043b2:	5cd3      	ldrb	r3, [r2, r3]
 80043b4:	40d8      	lsrs	r0, r3
 80043b6:	4b3b      	ldr	r3, [pc, #236]	; (80044a4 <HAL_RCC_ClockConfig+0x144>)
 80043b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80043ba:	2000      	movs	r0, #0
 80043bc:	f7ff faba 	bl	8003934 <HAL_InitTick>
  return HAL_OK;
 80043c0:	2000      	movs	r0, #0
}
 80043c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	6813      	ldr	r3, [r2, #0]
 80043c8:	f023 0307 	bic.w	r3, r3, #7
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043d0:	6813      	ldr	r3, [r2, #0]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	4299      	cmp	r1, r3
 80043d8:	d0cc      	beq.n	8004374 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80043da:	2001      	movs	r0, #1
 80043dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e0:	492e      	ldr	r1, [pc, #184]	; (800449c <HAL_RCC_ClockConfig+0x13c>)
 80043e2:	68a8      	ldr	r0, [r5, #8]
 80043e4:	684b      	ldr	r3, [r1, #4]
 80043e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ea:	4303      	orrs	r3, r0
 80043ec:	604b      	str	r3, [r1, #4]
 80043ee:	e7c4      	b.n	800437a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f0:	686a      	ldr	r2, [r5, #4]
 80043f2:	4c2a      	ldr	r4, [pc, #168]	; (800449c <HAL_RCC_ClockConfig+0x13c>)
 80043f4:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f8:	d11c      	bne.n	8004434 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fe:	d0ec      	beq.n	80043da <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004400:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004402:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004406:	f023 0303 	bic.w	r3, r3, #3
 800440a:	4313      	orrs	r3, r2
 800440c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800440e:	f7ff fabf 	bl	8003990 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004412:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8004414:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004416:	2b01      	cmp	r3, #1
 8004418:	d114      	bne.n	8004444 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800441a:	6863      	ldr	r3, [r4, #4]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b04      	cmp	r3, #4
 8004422:	d0ac      	beq.n	800437e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004424:	f7ff fab4 	bl	8003990 <HAL_GetTick>
 8004428:	1bc0      	subs	r0, r0, r7
 800442a:	4540      	cmp	r0, r8
 800442c:	d9f5      	bls.n	800441a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800442e:	2003      	movs	r0, #3
 8004430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004434:	2a02      	cmp	r2, #2
 8004436:	d102      	bne.n	800443e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004438:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800443c:	e7df      	b.n	80043fe <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443e:	f013 0f02 	tst.w	r3, #2
 8004442:	e7dc      	b.n	80043fe <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004444:	2b02      	cmp	r3, #2
 8004446:	d10f      	bne.n	8004468 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004448:	6863      	ldr	r3, [r4, #4]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b08      	cmp	r3, #8
 8004450:	d095      	beq.n	800437e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004452:	f7ff fa9d 	bl	8003990 <HAL_GetTick>
 8004456:	1bc0      	subs	r0, r0, r7
 8004458:	4540      	cmp	r0, r8
 800445a:	d9f5      	bls.n	8004448 <HAL_RCC_ClockConfig+0xe8>
 800445c:	e7e7      	b.n	800442e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445e:	f7ff fa97 	bl	8003990 <HAL_GetTick>
 8004462:	1bc0      	subs	r0, r0, r7
 8004464:	4540      	cmp	r0, r8
 8004466:	d8e2      	bhi.n	800442e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	f013 0f0c 	tst.w	r3, #12
 800446e:	d1f6      	bne.n	800445e <HAL_RCC_ClockConfig+0xfe>
 8004470:	e785      	b.n	800437e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	f023 0307 	bic.w	r3, r3, #7
 8004478:	4333      	orrs	r3, r6
 800447a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800447c:	6813      	ldr	r3, [r2, #0]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	429e      	cmp	r6, r3
 8004484:	d1a9      	bne.n	80043da <HAL_RCC_ClockConfig+0x7a>
 8004486:	e780      	b.n	800438a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	68e9      	ldr	r1, [r5, #12]
 800448c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004490:	430b      	orrs	r3, r1
 8004492:	6063      	str	r3, [r4, #4]
 8004494:	e77e      	b.n	8004394 <HAL_RCC_ClockConfig+0x34>
 8004496:	bf00      	nop
 8004498:	40022000 	.word	0x40022000
 800449c:	40021000 	.word	0x40021000
 80044a0:	080095e8 	.word	0x080095e8
 80044a4:	20000000 	.word	0x20000000

080044a8 <HAL_RCC_GetHCLKFreq>:
}
 80044a8:	4b01      	ldr	r3, [pc, #4]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000000 	.word	0x20000000

080044b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044b4:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80044b6:	4a05      	ldr	r2, [pc, #20]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80044be:	5cd3      	ldrb	r3, [r2, r3]
 80044c0:	4a03      	ldr	r2, [pc, #12]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80044c2:	6810      	ldr	r0, [r2, #0]
}    
 80044c4:	40d8      	lsrs	r0, r3
 80044c6:	4770      	bx	lr
 80044c8:	40021000 	.word	0x40021000
 80044cc:	080095f8 	.word	0x080095f8
 80044d0:	20000000 	.word	0x20000000

080044d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80044d6:	4a05      	ldr	r2, [pc, #20]	; (80044ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80044de:	5cd3      	ldrb	r3, [r2, r3]
 80044e0:	4a03      	ldr	r2, [pc, #12]	; (80044f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80044e2:	6810      	ldr	r0, [r2, #0]
} 
 80044e4:	40d8      	lsrs	r0, r3
 80044e6:	4770      	bx	lr
 80044e8:	40021000 	.word	0x40021000
 80044ec:	080095f8 	.word	0x080095f8
 80044f0:	20000000 	.word	0x20000000

080044f4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044f4:	6803      	ldr	r3, [r0, #0]
{
 80044f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044fa:	07d9      	lsls	r1, r3, #31
{
 80044fc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044fe:	d520      	bpl.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004500:	4c35      	ldr	r4, [pc, #212]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004502:	69e3      	ldr	r3, [r4, #28]
 8004504:	00da      	lsls	r2, r3, #3
 8004506:	d432      	bmi.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004508:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	69e3      	ldr	r3, [r4, #28]
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	61e3      	str	r3, [r4, #28]
 8004512:	69e3      	ldr	r3, [r4, #28]
 8004514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	4e2f      	ldr	r6, [pc, #188]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800451e:	6833      	ldr	r3, [r6, #0]
 8004520:	05db      	lsls	r3, r3, #23
 8004522:	d526      	bpl.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004524:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004526:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800452a:	d136      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800452c:	6a23      	ldr	r3, [r4, #32]
 800452e:	686a      	ldr	r2, [r5, #4]
 8004530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004534:	4313      	orrs	r3, r2
 8004536:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004538:	b11f      	cbz	r7, 8004542 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800453a:	69e3      	ldr	r3, [r4, #28]
 800453c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004540:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004542:	6828      	ldr	r0, [r5, #0]
 8004544:	0783      	lsls	r3, r0, #30
 8004546:	d506      	bpl.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004548:	4a23      	ldr	r2, [pc, #140]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800454a:	68a9      	ldr	r1, [r5, #8]
 800454c:	6853      	ldr	r3, [r2, #4]
 800454e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004552:	430b      	orrs	r3, r1
 8004554:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004556:	f010 0010 	ands.w	r0, r0, #16
 800455a:	d01b      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800455c:	4a1e      	ldr	r2, [pc, #120]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800455e:	68e9      	ldr	r1, [r5, #12]
 8004560:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004562:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004564:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004568:	430b      	orrs	r3, r1
 800456a:	6053      	str	r3, [r2, #4]
 800456c:	e012      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800456e:	2700      	movs	r7, #0
 8004570:	e7d4      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004572:	6833      	ldr	r3, [r6, #0]
 8004574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004578:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800457a:	f7ff fa09 	bl	8003990 <HAL_GetTick>
 800457e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004580:	6833      	ldr	r3, [r6, #0]
 8004582:	05d8      	lsls	r0, r3, #23
 8004584:	d4ce      	bmi.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004586:	f7ff fa03 	bl	8003990 <HAL_GetTick>
 800458a:	eba0 0008 	sub.w	r0, r0, r8
 800458e:	2864      	cmp	r0, #100	; 0x64
 8004590:	d9f6      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8004592:	2003      	movs	r0, #3
}
 8004594:	b002      	add	sp, #8
 8004596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800459a:	686a      	ldr	r2, [r5, #4]
 800459c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d0c3      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80045a4:	2001      	movs	r0, #1
 80045a6:	4a0e      	ldr	r2, [pc, #56]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80045aa:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ac:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80045b4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045b6:	07d9      	lsls	r1, r3, #31
 80045b8:	d5b8      	bpl.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80045ba:	f7ff f9e9 	bl	8003990 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80045c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c4:	6a23      	ldr	r3, [r4, #32]
 80045c6:	079a      	lsls	r2, r3, #30
 80045c8:	d4b0      	bmi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7ff f9e1 	bl	8003990 <HAL_GetTick>
 80045ce:	1b80      	subs	r0, r0, r6
 80045d0:	4540      	cmp	r0, r8
 80045d2:	d9f7      	bls.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80045d4:	e7dd      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40007000 	.word	0x40007000
 80045e0:	42420440 	.word	0x42420440

080045e4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e8:	6805      	ldr	r5, [r0, #0]
 80045ea:	68c2      	ldr	r2, [r0, #12]
 80045ec:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ee:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045f4:	4313      	orrs	r3, r2
 80045f6:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045f8:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80045fa:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045fc:	430b      	orrs	r3, r1
 80045fe:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8004600:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8004604:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004608:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800460a:	4313      	orrs	r3, r2
 800460c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800460e:	696b      	ldr	r3, [r5, #20]
 8004610:	6982      	ldr	r2, [r0, #24]
 8004612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004616:	4313      	orrs	r3, r2
 8004618:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800461a:	4b40      	ldr	r3, [pc, #256]	; (800471c <UART_SetConfig+0x138>)
{
 800461c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800461e:	429d      	cmp	r5, r3
 8004620:	f04f 0419 	mov.w	r4, #25
 8004624:	d146      	bne.n	80046b4 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004626:	f7ff ff55 	bl	80044d4 <HAL_RCC_GetPCLK2Freq>
 800462a:	fb04 f300 	mul.w	r3, r4, r0
 800462e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8004632:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004636:	00b6      	lsls	r6, r6, #2
 8004638:	fbb3 f3f6 	udiv	r3, r3, r6
 800463c:	fbb3 f3f8 	udiv	r3, r3, r8
 8004640:	011e      	lsls	r6, r3, #4
 8004642:	f7ff ff47 	bl	80044d4 <HAL_RCC_GetPCLK2Freq>
 8004646:	4360      	muls	r0, r4
 8004648:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	fbb0 f7f3 	udiv	r7, r0, r3
 8004652:	f7ff ff3f 	bl	80044d4 <HAL_RCC_GetPCLK2Freq>
 8004656:	4360      	muls	r0, r4
 8004658:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004662:	fbb3 f3f8 	udiv	r3, r3, r8
 8004666:	fb08 7313 	mls	r3, r8, r3, r7
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	3332      	adds	r3, #50	; 0x32
 800466e:	fbb3 f3f8 	udiv	r3, r3, r8
 8004672:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8004676:	f7ff ff2d 	bl	80044d4 <HAL_RCC_GetPCLK2Freq>
 800467a:	4360      	muls	r0, r4
 800467c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004680:	0092      	lsls	r2, r2, #2
 8004682:	fbb0 faf2 	udiv	sl, r0, r2
 8004686:	f7ff ff25 	bl	80044d4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800468a:	4360      	muls	r0, r4
 800468c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	fbb0 f3f3 	udiv	r3, r0, r3
 8004696:	fbb3 f3f8 	udiv	r3, r3, r8
 800469a:	fb08 a313 	mls	r3, r8, r3, sl
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	3332      	adds	r3, #50	; 0x32
 80046a2:	fbb3 f3f8 	udiv	r3, r3, r8
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	433b      	orrs	r3, r7
 80046ac:	4433      	add	r3, r6
 80046ae:	60ab      	str	r3, [r5, #8]
 80046b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b4:	f7ff fefe 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 80046b8:	fb04 f300 	mul.w	r3, r4, r0
 80046bc:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80046c0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80046c4:	00b6      	lsls	r6, r6, #2
 80046c6:	fbb3 f3f6 	udiv	r3, r3, r6
 80046ca:	fbb3 f3f8 	udiv	r3, r3, r8
 80046ce:	011e      	lsls	r6, r3, #4
 80046d0:	f7ff fef0 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 80046d4:	4360      	muls	r0, r4
 80046d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	fbb0 f7f3 	udiv	r7, r0, r3
 80046e0:	f7ff fee8 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 80046e4:	4360      	muls	r0, r4
 80046e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80046f0:	fbb3 f3f8 	udiv	r3, r3, r8
 80046f4:	fb08 7313 	mls	r3, r8, r3, r7
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	3332      	adds	r3, #50	; 0x32
 80046fc:	fbb3 f3f8 	udiv	r3, r3, r8
 8004700:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8004704:	f7ff fed6 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8004708:	4360      	muls	r0, r4
 800470a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800470e:	0092      	lsls	r2, r2, #2
 8004710:	fbb0 faf2 	udiv	sl, r0, r2
 8004714:	f7ff fece 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8004718:	e7b7      	b.n	800468a <UART_SetConfig+0xa6>
 800471a:	bf00      	nop
 800471c:	40013800 	.word	0x40013800

08004720 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	4604      	mov	r4, r0
 8004724:	460e      	mov	r6, r1
 8004726:	4617      	mov	r7, r2
 8004728:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800472a:	6821      	ldr	r1, [r4, #0]
 800472c:	680b      	ldr	r3, [r1, #0]
 800472e:	ea36 0303 	bics.w	r3, r6, r3
 8004732:	d101      	bne.n	8004738 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8004734:	2000      	movs	r0, #0
}
 8004736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8004738:	1c6b      	adds	r3, r5, #1
 800473a:	d0f7      	beq.n	800472c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800473c:	b995      	cbnz	r5, 8004764 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800473e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8004740:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004748:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004752:	2320      	movs	r3, #32
 8004754:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004758:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800475c:	2300      	movs	r3, #0
 800475e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8004762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004764:	f7ff f914 	bl	8003990 <HAL_GetTick>
 8004768:	1bc0      	subs	r0, r0, r7
 800476a:	4285      	cmp	r5, r0
 800476c:	d2dd      	bcs.n	800472a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800476e:	e7e6      	b.n	800473e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08004770 <HAL_UART_Init>:
{
 8004770:	b510      	push	{r4, lr}
  if(huart == NULL)
 8004772:	4604      	mov	r4, r0
 8004774:	b340      	cbz	r0, 80047c8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004776:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800477a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800477e:	b91b      	cbnz	r3, 8004788 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004780:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004784:	f000 fa26 	bl	8004bd4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004788:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800478a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800478c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004790:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004792:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004798:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800479a:	f7ff ff23 	bl	80045e4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800479e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047b0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80047ba:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047bc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80047be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80047c2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80047c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80047c8:	2001      	movs	r0, #1
}
 80047ca:	bd10      	pop	{r4, pc}

080047cc <HAL_UART_Transmit>:
{
 80047cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80047d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80047d6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80047d8:	2b20      	cmp	r3, #32
{
 80047da:	460d      	mov	r5, r1
 80047dc:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80047de:	d14e      	bne.n	800487e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80047e0:	2900      	cmp	r1, #0
 80047e2:	d049      	beq.n	8004878 <HAL_UART_Transmit+0xac>
 80047e4:	2a00      	cmp	r2, #0
 80047e6:	d047      	beq.n	8004878 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80047e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d046      	beq.n	800487e <HAL_UART_Transmit+0xb2>
 80047f0:	2301      	movs	r3, #1
 80047f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047fa:	2321      	movs	r3, #33	; 0x21
 80047fc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8004800:	f7ff f8c6 	bl	8003990 <HAL_GetTick>
 8004804:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8004806:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800480a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800480e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004810:	b29b      	uxth	r3, r3
 8004812:	b96b      	cbnz	r3, 8004830 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004814:	463b      	mov	r3, r7
 8004816:	4632      	mov	r2, r6
 8004818:	2140      	movs	r1, #64	; 0x40
 800481a:	4620      	mov	r0, r4
 800481c:	f7ff ff80 	bl	8004720 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004820:	b9a8      	cbnz	r0, 800484e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8004822:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004824:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8004828:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800482c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8004830:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004832:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8004834:	3b01      	subs	r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800483a:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800483c:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004842:	4620      	mov	r0, r4
 8004844:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004846:	d10e      	bne.n	8004866 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004848:	f7ff ff6a 	bl	8004720 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800484c:	b110      	cbz	r0, 8004854 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800484e:	2003      	movs	r0, #3
 8004850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004854:	882b      	ldrh	r3, [r5, #0]
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	b943      	cbnz	r3, 8004874 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8004862:	3502      	adds	r5, #2
 8004864:	e7d3      	b.n	800480e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004866:	f7ff ff5b 	bl	8004720 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800486a:	2800      	cmp	r0, #0
 800486c:	d1ef      	bne.n	800484e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	782a      	ldrb	r2, [r5, #0]
 8004872:	605a      	str	r2, [r3, #4]
 8004874:	3501      	adds	r5, #1
 8004876:	e7ca      	b.n	800480e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8004878:	2001      	movs	r0, #1
 800487a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800487e:	2002      	movs	r0, #2
}
 8004880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004884 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004884:	2301      	movs	r3, #1
{
 8004886:	b510      	push	{r4, lr}
 8004888:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800488a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800488c:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800488e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004890:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004892:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004894:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004896:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004898:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800489a:	f7ff fb97 	bl	8003fcc <HAL_RCC_OscConfig>
 800489e:	4601      	mov	r1, r0
 80048a0:	b100      	cbz	r0, 80048a4 <SystemClock_Config+0x20>
 80048a2:	e7fe      	b.n	80048a2 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048a4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80048a6:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048a8:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80048aa:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048ac:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80048ae:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048b0:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80048b2:	f7ff fd55 	bl	8004360 <HAL_RCC_ClockConfig>
 80048b6:	b100      	cbz	r0, 80048ba <SystemClock_Config+0x36>
 80048b8:	e7fe      	b.n	80048b8 <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80048ba:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048bc:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80048be:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048c0:	f7ff fe18 	bl	80044f4 <HAL_RCCEx_PeriphCLKConfig>
 80048c4:	4604      	mov	r4, r0
 80048c6:	b100      	cbz	r0, 80048ca <SystemClock_Config+0x46>
 80048c8:	e7fe      	b.n	80048c8 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80048ca:	f7ff fded 	bl	80044a8 <HAL_RCC_GetHCLKFreq>
 80048ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80048d6:	f7ff fa6b 	bl	8003db0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80048da:	2004      	movs	r0, #4
 80048dc:	f7ff fa7e 	bl	8003ddc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80048e0:	4622      	mov	r2, r4
 80048e2:	4621      	mov	r1, r4
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295
 80048e8:	f7ff fa2e 	bl	8003d48 <HAL_NVIC_SetPriority>
}
 80048ec:	b014      	add	sp, #80	; 0x50
 80048ee:	bd10      	pop	{r4, pc}

080048f0 <main>:
{
 80048f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f4:	b091      	sub	sp, #68	; 0x44
	HAL_Init();
 80048f6:	f7ff f831 	bl	800395c <HAL_Init>
	SystemClock_Config();
 80048fa:	f7ff ffc3 	bl	8004884 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048fe:	4b76      	ldr	r3, [pc, #472]	; (8004ad8 <main+0x1e8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004904:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004906:	4875      	ldr	r0, [pc, #468]	; (8004adc <main+0x1ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004908:	f042 0210 	orr.w	r2, r2, #16
 800490c:	619a      	str	r2, [r3, #24]
 800490e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004910:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004912:	f002 0210 	and.w	r2, r2, #16
 8004916:	9204      	str	r2, [sp, #16]
 8004918:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800491a:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 800491c:	4c70      	ldr	r4, [pc, #448]	; (8004ae0 <main+0x1f0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800491e:	f042 0204 	orr.w	r2, r2, #4
 8004922:	619a      	str	r2, [r3, #24]
 8004924:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004926:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	9305      	str	r3, [sp, #20]
 800492e:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004930:	f7ff fb46 	bl	8003fc0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004938:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800493c:	4867      	ldr	r0, [pc, #412]	; (8004adc <main+0x1ec>)
 800493e:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004940:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004942:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004944:	f7ff fa5c 	bl	8003e00 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8004948:	4b66      	ldr	r3, [pc, #408]	; (8004ae4 <main+0x1f4>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800494a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 800494e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004950:	2300      	movs	r3, #0
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004952:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004954:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004956:	60e3      	str	r3, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004958:	6163      	str	r3, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800495a:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800495c:	6063      	str	r3, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 800495e:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004960:	f7ff f960 	bl	8003c24 <HAL_ADC_Init>
 8004964:	b100      	cbz	r0, 8004968 <main+0x78>
 8004966:	e7fe      	b.n	8004966 <main+0x76>
  sConfig.Channel = ADC_CHANNEL_3;
 8004968:	2303      	movs	r3, #3
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800496a:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800496c:	a90a      	add	r1, sp, #40	; 0x28
 800496e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8004970:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.Rank = 1;
 8004972:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004974:	f7ff f816 	bl	80039a4 <HAL_ADC_ConfigChannel>
 8004978:	b100      	cbz	r0, 800497c <main+0x8c>
 800497a:	e7fe      	b.n	800497a <main+0x8a>
  huart1.Init.BaudRate = 9600;
 800497c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart1.Instance = USART1;
 8004980:	4b59      	ldr	r3, [pc, #356]	; (8004ae8 <main+0x1f8>)
  huart1.Init.BaudRate = 9600;
 8004982:	495a      	ldr	r1, [pc, #360]	; (8004aec <main+0x1fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004984:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 9600;
 8004986:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800498a:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800498c:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800498e:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004990:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004992:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004994:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004996:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004998:	f7ff feea 	bl	8004770 <HAL_UART_Init>
 800499c:	b100      	cbz	r0, 80049a0 <main+0xb0>
 800499e:	e7fe      	b.n	800499e <main+0xae>
	uint8_t space[] = " ";
 80049a0:	2320      	movs	r3, #32
 80049a2:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint8_t eComercial[] = "&";
 80049a6:	2326      	movs	r3, #38	; 0x26
 80049a8:	f8ad 3008 	strh.w	r3, [sp, #8]
	uint8_t hashtag[] = "#";
 80049ac:	2323      	movs	r3, #35	; 0x23
 80049ae:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint8_t buffer[] = "Welcome to the HELL!!\n";
 80049b2:	4b4f      	ldr	r3, [pc, #316]	; (8004af0 <main+0x200>)
 80049b4:	aa0a      	add	r2, sp, #40	; 0x28
 80049b6:	f103 0510 	add.w	r5, r3, #16
 80049ba:	4614      	mov	r4, r2
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	3308      	adds	r3, #8
 80049c2:	c403      	stmia	r4!, {r0, r1}
 80049c4:	42ab      	cmp	r3, r5
 80049c6:	4622      	mov	r2, r4
 80049c8:	d1f7      	bne.n	80049ba <main+0xca>
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	8899      	ldrh	r1, [r3, #4]
 80049ce:	799b      	ldrb	r3, [r3, #6]
 80049d0:	6020      	str	r0, [r4, #0]
 80049d2:	80a1      	strh	r1, [r4, #4]
 80049d4:	71a3      	strb	r3, [r4, #6]
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 100);
 80049d6:	2217      	movs	r2, #23
	return (605.89 * tensaoSensor) / (3.3 - tensaoSensor);
 80049d8:	a537      	add	r5, pc, #220	; (adr r5, 8004ab8 <main+0x1c8>)
 80049da:	e9d5 4500 	ldrd	r4, r5, [r5]
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 100);
 80049de:	2364      	movs	r3, #100	; 0x64
 80049e0:	a90a      	add	r1, sp, #40	; 0x28
 80049e2:	4841      	ldr	r0, [pc, #260]	; (8004ae8 <main+0x1f8>)
 80049e4:	f7ff fef2 	bl	80047cc <HAL_UART_Transmit>
		HAL_ADC_Start(&hadc1);
 80049e8:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8004ae0 <main+0x1f0>
		HAL_UART_Transmit(&huart1, (uint8_t*)eComercial, sizeof(eComercial), 100);
 80049ec:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8004ae8 <main+0x1f8>
		HAL_ADC_Start(&hadc1);
 80049f0:	4658      	mov	r0, fp
 80049f2:	f7ff f893 	bl	8003b1c <HAL_ADC_Start>
		tensaoSensor = HAL_ADC_GetValue(&hadc1);
 80049f6:	4658      	mov	r0, fp
 80049f8:	f7fe ffd0 	bl	800399c <HAL_ADC_GetValue>
		resistencia = calculaResistencia(tabelaadc[tensaoSensor]);
 80049fc:	4b3d      	ldr	r3, [pc, #244]	; (8004af4 <main+0x204>)
 80049fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004a02:	f7fe fd09 	bl	8003418 <__aeabi_f2d>
	return (605.89 * tensaoSensor) / (3.3 - tensaoSensor);
 8004a06:	4622      	mov	r2, r4
 8004a08:	462b      	mov	r3, r5
		resistencia = calculaResistencia(tabelaadc[tensaoSensor]);
 8004a0a:	4680      	mov	r8, r0
 8004a0c:	4689      	mov	r9, r1
	return (605.89 * tensaoSensor) / (3.3 - tensaoSensor);
 8004a0e:	f7fe fd57 	bl	80034c0 <__aeabi_dmul>
 8004a12:	4642      	mov	r2, r8
 8004a14:	4606      	mov	r6, r0
 8004a16:	460f      	mov	r7, r1
 8004a18:	a129      	add	r1, pc, #164	; (adr r1, 8004ac0 <main+0x1d0>)
 8004a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a1e:	464b      	mov	r3, r9
 8004a20:	f7fe fb9a 	bl	8003158 <__aeabi_dsub>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4630      	mov	r0, r6
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	f7fe fe72 	bl	8003714 <__aeabi_ddiv>
	return (resistencia - BETA) / ALFA;
 8004a30:	a325      	add	r3, pc, #148	; (adr r3, 8004ac8 <main+0x1d8>)
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	f7fe fb8f 	bl	8003158 <__aeabi_dsub>
 8004a3a:	a325      	add	r3, pc, #148	; (adr r3, 8004ad0 <main+0x1e0>)
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f7fe fe68 	bl	8003714 <__aeabi_ddiv>
		temperatura *= 100;
 8004a44:	2200      	movs	r2, #0
 8004a46:	4b2c      	ldr	r3, [pc, #176]	; (8004af8 <main+0x208>)
 8004a48:	f7fe fd3a 	bl	80034c0 <__aeabi_dmul>
		tempFinal = (int)temperatura;
 8004a4c:	f7fe ff4a 	bl	80038e4 <__aeabi_d2iz>
		tempFinal = (int)(tempFinal / 10);
 8004a50:	220a      	movs	r2, #10
 8004a52:	fb90 f1f2 	sdiv	r1, r0, r2
		resto = tempFinal % 10;
 8004a56:	fb02 0011 	mls	r0, r2, r1, r0
		if (resto > 5) {
 8004a5a:	2805      	cmp	r0, #5
			tempFinal++;
 8004a5c:	bfc8      	it	gt
 8004a5e:	3101      	addgt	r1, #1
		resto = tempFinal % 10;
 8004a60:	fb91 f3f2 	sdiv	r3, r1, r2
 8004a64:	fb02 1313 	mls	r3, r2, r3, r1
		tempFinal -= resto;
 8004a68:	1ac9      	subs	r1, r1, r3
		int len = sprintf(temp, "%d.%d", tempFinal / 10, resto);
 8004a6a:	fb91 f2f2 	sdiv	r2, r1, r2
 8004a6e:	a806      	add	r0, sp, #24
 8004a70:	4922      	ldr	r1, [pc, #136]	; (8004afc <main+0x20c>)
 8004a72:	f000 f95b 	bl	8004d2c <siprintf>
 8004a76:	4606      	mov	r6, r0
		HAL_UART_Transmit(&huart1, (uint8_t*)eComercial, sizeof(eComercial), 100);
 8004a78:	2364      	movs	r3, #100	; 0x64
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	a902      	add	r1, sp, #8
 8004a7e:	4650      	mov	r0, sl
 8004a80:	f7ff fea4 	bl	80047cc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)(&temp), len, 100);
 8004a84:	2364      	movs	r3, #100	; 0x64
 8004a86:	b2b2      	uxth	r2, r6
 8004a88:	a906      	add	r1, sp, #24
 8004a8a:	4650      	mov	r0, sl
 8004a8c:	f7ff fe9e 	bl	80047cc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)space, sizeof(space), 100);
 8004a90:	2364      	movs	r3, #100	; 0x64
 8004a92:	2202      	movs	r2, #2
 8004a94:	a901      	add	r1, sp, #4
 8004a96:	4650      	mov	r0, sl
 8004a98:	f7ff fe98 	bl	80047cc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)hashtag, sizeof(hashtag), 100);
 8004a9c:	2364      	movs	r3, #100	; 0x64
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	a903      	add	r1, sp, #12
 8004aa2:	4650      	mov	r0, sl
 8004aa4:	f7ff fe92 	bl	80047cc <HAL_UART_Transmit>
 8004aa8:	2300      	movs	r3, #0
		for(i=0;i<1000000;i++);
 8004aaa:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <main+0x210>)
 8004aac:	3301      	adds	r3, #1
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d1fc      	bne.n	8004aac <main+0x1bc>
 8004ab2:	e79d      	b.n	80049f0 <main+0x100>
 8004ab4:	f3af 8000 	nop.w
 8004ab8:	b851eb85 	.word	0xb851eb85
 8004abc:	4082ef1e 	.word	0x4082ef1e
 8004ac0:	66666666 	.word	0x66666666
 8004ac4:	400a6666 	.word	0x400a6666
 8004ac8:	08de4af9 	.word	0x08de4af9
 8004acc:	40565224 	.word	0x40565224
 8004ad0:	ed769080 	.word	0xed769080
 8004ad4:	3fd4541c 	.word	0x3fd4541c
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	40011000 	.word	0x40011000
 8004ae0:	20000094 	.word	0x20000094
 8004ae4:	40012400 	.word	0x40012400
 8004ae8:	200000c4 	.word	0x200000c4
 8004aec:	40013800 	.word	0x40013800
 8004af0:	080055ce 	.word	0x080055ce
 8004af4:	080055e8 	.word	0x080055e8
 8004af8:	40590000 	.word	0x40590000
 8004afc:	080055c8 	.word	0x080055c8
 8004b00:	000f4240 	.word	0x000f4240

08004b04 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004b04:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <HAL_MspInit+0x88>)
{
 8004b06:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004b08:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b0a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004b0c:	f042 0201 	orr.w	r2, r2, #1
 8004b10:	619a      	str	r2, [r3, #24]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b1c:	f7ff f902 	bl	8003d24 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004b20:	2200      	movs	r2, #0
 8004b22:	f06f 000b 	mvn.w	r0, #11
 8004b26:	4611      	mov	r1, r2
 8004b28:	f7ff f90e 	bl	8003d48 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f06f 000a 	mvn.w	r0, #10
 8004b32:	4611      	mov	r1, r2
 8004b34:	f7ff f908 	bl	8003d48 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f06f 0009 	mvn.w	r0, #9
 8004b3e:	4611      	mov	r1, r2
 8004b40:	f7ff f902 	bl	8003d48 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004b44:	2200      	movs	r2, #0
 8004b46:	f06f 0004 	mvn.w	r0, #4
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	f7ff f8fc 	bl	8003d48 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004b50:	2200      	movs	r2, #0
 8004b52:	f06f 0003 	mvn.w	r0, #3
 8004b56:	4611      	mov	r1, r2
 8004b58:	f7ff f8f6 	bl	8003d48 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f06f 0001 	mvn.w	r0, #1
 8004b62:	4611      	mov	r1, r2
 8004b64:	f7ff f8f0 	bl	8003d48 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6e:	4611      	mov	r1, r2
 8004b70:	f7ff f8ea 	bl	8003d48 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <HAL_MspInit+0x8c>)
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004b84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b86:	b003      	add	sp, #12
 8004b88:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	40010000 	.word	0x40010000

08004b94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8004b96:	6802      	ldr	r2, [r0, #0]
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <HAL_ADC_MspInit+0x38>)
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d112      	bne.n	8004bc4 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b9e:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8004ba2:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba4:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004baa:	619a      	str	r2, [r3, #24]
 8004bac:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bae:	4808      	ldr	r0, [pc, #32]	; (8004bd0 <HAL_ADC_MspInit+0x3c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004bb8:	2308      	movs	r3, #8
 8004bba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc0:	f7ff f91e 	bl	8003e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004bc4:	b007      	add	sp, #28
 8004bc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bca:	bf00      	nop
 8004bcc:	40012400 	.word	0x40012400
 8004bd0:	40010800 	.word	0x40010800

08004bd4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8004bd6:	6802      	ldr	r2, [r0, #0]
 8004bd8:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_UART_MspInit+0x50>)
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d11f      	bne.n	8004c1e <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bde:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8004be2:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8004be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bea:	619a      	str	r2, [r3, #24]
 8004bec:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bee:	480e      	ldr	r0, [pc, #56]	; (8004c28 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bfc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c02:	2303      	movs	r3, #3
 8004c04:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c06:	f7ff f8fb 	bl	8003e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c0e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c10:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c12:	a902      	add	r1, sp, #8
 8004c14:	4804      	ldr	r0, [pc, #16]	; (8004c28 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c18:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c1a:	f7ff f8f1 	bl	8003e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004c1e:	b007      	add	sp, #28
 8004c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c24:	40013800 	.word	0x40013800
 8004c28:	40010800 	.word	0x40010800

08004c2c <NMI_Handler>:
 8004c2c:	4770      	bx	lr

08004c2e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004c2e:	e7fe      	b.n	8004c2e <HardFault_Handler>

08004c30 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004c30:	e7fe      	b.n	8004c30 <MemManage_Handler>

08004c32 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004c32:	e7fe      	b.n	8004c32 <BusFault_Handler>

08004c34 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004c34:	e7fe      	b.n	8004c34 <UsageFault_Handler>

08004c36 <SVC_Handler>:
 8004c36:	4770      	bx	lr

08004c38 <DebugMon_Handler>:
 8004c38:	4770      	bx	lr

08004c3a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004c3a:	4770      	bx	lr

08004c3c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004c3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c3e:	f7fe fe9f 	bl	8003980 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8004c46:	f7ff b8d6 	b.w	8003df6 <HAL_SYSTICK_IRQHandler>
	...

08004c4c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <SystemInit+0x40>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	f042 0201 	orr.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004c56:	6859      	ldr	r1, [r3, #4]
 8004c58:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <SystemInit+0x44>)
 8004c5a:	400a      	ands	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004c64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c68:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c70:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004c78:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004c7a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004c7e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004c80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c84:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <SystemInit+0x48>)
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	f8ff0000 	.word	0xf8ff0000
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004c98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004c9a:	e003      	b.n	8004ca4 <LoopCopyDataInit>

08004c9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004c9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004ca0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004ca2:	3104      	adds	r1, #4

08004ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004ca4:	480a      	ldr	r0, [pc, #40]	; (8004cd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004ca8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004caa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004cac:	d3f6      	bcc.n	8004c9c <CopyDataInit>
  ldr r2, =_sbss
 8004cae:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004cb0:	e002      	b.n	8004cb8 <LoopFillZerobss>

08004cb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004cb2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004cb4:	f842 3b04 	str.w	r3, [r2], #4

08004cb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004cb8:	4b08      	ldr	r3, [pc, #32]	; (8004cdc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004cba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004cbc:	d3f9      	bcc.n	8004cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004cbe:	f7ff ffc5 	bl	8004c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cc2:	f000 f80f 	bl	8004ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004cc6:	f7ff fe13 	bl	80048f0 <main>
  bx lr
 8004cca:	4770      	bx	lr
  ldr r3, =_sidata
 8004ccc:	0800963c 	.word	0x0800963c
  ldr r0, =_sdata
 8004cd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004cd4:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8004cd8:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8004cdc:	20000108 	.word	0x20000108

08004ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ce0:	e7fe      	b.n	8004ce0 <ADC1_2_IRQHandler>
	...

08004ce4 <__libc_init_array>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	2500      	movs	r5, #0
 8004ce8:	4e0c      	ldr	r6, [pc, #48]	; (8004d1c <__libc_init_array+0x38>)
 8004cea:	4c0d      	ldr	r4, [pc, #52]	; (8004d20 <__libc_init_array+0x3c>)
 8004cec:	1ba4      	subs	r4, r4, r6
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	42a5      	cmp	r5, r4
 8004cf2:	d109      	bne.n	8004d08 <__libc_init_array+0x24>
 8004cf4:	f000 fc54 	bl	80055a0 <_init>
 8004cf8:	2500      	movs	r5, #0
 8004cfa:	4e0a      	ldr	r6, [pc, #40]	; (8004d24 <__libc_init_array+0x40>)
 8004cfc:	4c0a      	ldr	r4, [pc, #40]	; (8004d28 <__libc_init_array+0x44>)
 8004cfe:	1ba4      	subs	r4, r4, r6
 8004d00:	10a4      	asrs	r4, r4, #2
 8004d02:	42a5      	cmp	r5, r4
 8004d04:	d105      	bne.n	8004d12 <__libc_init_array+0x2e>
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d0c:	4798      	blx	r3
 8004d0e:	3501      	adds	r5, #1
 8004d10:	e7ee      	b.n	8004cf0 <__libc_init_array+0xc>
 8004d12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d16:	4798      	blx	r3
 8004d18:	3501      	adds	r5, #1
 8004d1a:	e7f2      	b.n	8004d02 <__libc_init_array+0x1e>
 8004d1c:	08009634 	.word	0x08009634
 8004d20:	08009634 	.word	0x08009634
 8004d24:	08009634 	.word	0x08009634
 8004d28:	08009638 	.word	0x08009638

08004d2c <siprintf>:
 8004d2c:	b40e      	push	{r1, r2, r3}
 8004d2e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004d32:	b500      	push	{lr}
 8004d34:	b09c      	sub	sp, #112	; 0x70
 8004d36:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004d3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d3e:	9104      	str	r1, [sp, #16]
 8004d40:	9107      	str	r1, [sp, #28]
 8004d42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d46:	ab1d      	add	r3, sp, #116	; 0x74
 8004d48:	9002      	str	r0, [sp, #8]
 8004d4a:	9006      	str	r0, [sp, #24]
 8004d4c:	4808      	ldr	r0, [pc, #32]	; (8004d70 <siprintf+0x44>)
 8004d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d52:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004d56:	6800      	ldr	r0, [r0, #0]
 8004d58:	a902      	add	r1, sp, #8
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	f000 f866 	bl	8004e2c <_svfiprintf_r>
 8004d60:	2200      	movs	r2, #0
 8004d62:	9b02      	ldr	r3, [sp, #8]
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	b01c      	add	sp, #112	; 0x70
 8004d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d6c:	b003      	add	sp, #12
 8004d6e:	4770      	bx	lr
 8004d70:	20000004 	.word	0x20000004

08004d74 <__ssputs_r>:
 8004d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	688e      	ldr	r6, [r1, #8]
 8004d7a:	4682      	mov	sl, r0
 8004d7c:	429e      	cmp	r6, r3
 8004d7e:	460c      	mov	r4, r1
 8004d80:	4691      	mov	r9, r2
 8004d82:	4698      	mov	r8, r3
 8004d84:	d835      	bhi.n	8004df2 <__ssputs_r+0x7e>
 8004d86:	898a      	ldrh	r2, [r1, #12]
 8004d88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d8c:	d031      	beq.n	8004df2 <__ssputs_r+0x7e>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	6825      	ldr	r5, [r4, #0]
 8004d92:	6909      	ldr	r1, [r1, #16]
 8004d94:	1a6f      	subs	r7, r5, r1
 8004d96:	6965      	ldr	r5, [r4, #20]
 8004d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004da0:	f108 0301 	add.w	r3, r8, #1
 8004da4:	443b      	add	r3, r7
 8004da6:	429d      	cmp	r5, r3
 8004da8:	bf38      	it	cc
 8004daa:	461d      	movcc	r5, r3
 8004dac:	0553      	lsls	r3, r2, #21
 8004dae:	d531      	bpl.n	8004e14 <__ssputs_r+0xa0>
 8004db0:	4629      	mov	r1, r5
 8004db2:	f000 fb47 	bl	8005444 <_malloc_r>
 8004db6:	4606      	mov	r6, r0
 8004db8:	b950      	cbnz	r0, 8004dd0 <__ssputs_r+0x5c>
 8004dba:	230c      	movs	r3, #12
 8004dbc:	f8ca 3000 	str.w	r3, [sl]
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd0:	463a      	mov	r2, r7
 8004dd2:	6921      	ldr	r1, [r4, #16]
 8004dd4:	f000 fac4 	bl	8005360 <memcpy>
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de2:	81a3      	strh	r3, [r4, #12]
 8004de4:	6126      	str	r6, [r4, #16]
 8004de6:	443e      	add	r6, r7
 8004de8:	6026      	str	r6, [r4, #0]
 8004dea:	4646      	mov	r6, r8
 8004dec:	6165      	str	r5, [r4, #20]
 8004dee:	1bed      	subs	r5, r5, r7
 8004df0:	60a5      	str	r5, [r4, #8]
 8004df2:	4546      	cmp	r6, r8
 8004df4:	bf28      	it	cs
 8004df6:	4646      	movcs	r6, r8
 8004df8:	4649      	mov	r1, r9
 8004dfa:	4632      	mov	r2, r6
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	f000 faba 	bl	8005376 <memmove>
 8004e02:	68a3      	ldr	r3, [r4, #8]
 8004e04:	2000      	movs	r0, #0
 8004e06:	1b9b      	subs	r3, r3, r6
 8004e08:	60a3      	str	r3, [r4, #8]
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	441e      	add	r6, r3
 8004e0e:	6026      	str	r6, [r4, #0]
 8004e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e14:	462a      	mov	r2, r5
 8004e16:	f000 fb73 	bl	8005500 <_realloc_r>
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d1e1      	bne.n	8004de4 <__ssputs_r+0x70>
 8004e20:	6921      	ldr	r1, [r4, #16]
 8004e22:	4650      	mov	r0, sl
 8004e24:	f000 fac2 	bl	80053ac <_free_r>
 8004e28:	e7c7      	b.n	8004dba <__ssputs_r+0x46>
	...

08004e2c <_svfiprintf_r>:
 8004e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e30:	b09d      	sub	sp, #116	; 0x74
 8004e32:	9303      	str	r3, [sp, #12]
 8004e34:	898b      	ldrh	r3, [r1, #12]
 8004e36:	4680      	mov	r8, r0
 8004e38:	061c      	lsls	r4, r3, #24
 8004e3a:	460d      	mov	r5, r1
 8004e3c:	4616      	mov	r6, r2
 8004e3e:	d50f      	bpl.n	8004e60 <_svfiprintf_r+0x34>
 8004e40:	690b      	ldr	r3, [r1, #16]
 8004e42:	b96b      	cbnz	r3, 8004e60 <_svfiprintf_r+0x34>
 8004e44:	2140      	movs	r1, #64	; 0x40
 8004e46:	f000 fafd 	bl	8005444 <_malloc_r>
 8004e4a:	6028      	str	r0, [r5, #0]
 8004e4c:	6128      	str	r0, [r5, #16]
 8004e4e:	b928      	cbnz	r0, 8004e5c <_svfiprintf_r+0x30>
 8004e50:	230c      	movs	r3, #12
 8004e52:	f8c8 3000 	str.w	r3, [r8]
 8004e56:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5a:	e0c4      	b.n	8004fe6 <_svfiprintf_r+0x1ba>
 8004e5c:	2340      	movs	r3, #64	; 0x40
 8004e5e:	616b      	str	r3, [r5, #20]
 8004e60:	2300      	movs	r3, #0
 8004e62:	9309      	str	r3, [sp, #36]	; 0x24
 8004e64:	2320      	movs	r3, #32
 8004e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e6a:	2330      	movs	r3, #48	; 0x30
 8004e6c:	f04f 0b01 	mov.w	fp, #1
 8004e70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e74:	4637      	mov	r7, r6
 8004e76:	463c      	mov	r4, r7
 8004e78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d13c      	bne.n	8004efa <_svfiprintf_r+0xce>
 8004e80:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e84:	d00b      	beq.n	8004e9e <_svfiprintf_r+0x72>
 8004e86:	4653      	mov	r3, sl
 8004e88:	4632      	mov	r2, r6
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	f7ff ff71 	bl	8004d74 <__ssputs_r>
 8004e92:	3001      	adds	r0, #1
 8004e94:	f000 80a2 	beq.w	8004fdc <_svfiprintf_r+0x1b0>
 8004e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e9a:	4453      	add	r3, sl
 8004e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e9e:	783b      	ldrb	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 809b 	beq.w	8004fdc <_svfiprintf_r+0x1b0>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eac:	9304      	str	r3, [sp, #16]
 8004eae:	9307      	str	r3, [sp, #28]
 8004eb0:	9205      	str	r2, [sp, #20]
 8004eb2:	9306      	str	r3, [sp, #24]
 8004eb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eb8:	931a      	str	r3, [sp, #104]	; 0x68
 8004eba:	2205      	movs	r2, #5
 8004ebc:	7821      	ldrb	r1, [r4, #0]
 8004ebe:	4850      	ldr	r0, [pc, #320]	; (8005000 <_svfiprintf_r+0x1d4>)
 8004ec0:	f000 fa40 	bl	8005344 <memchr>
 8004ec4:	1c67      	adds	r7, r4, #1
 8004ec6:	9b04      	ldr	r3, [sp, #16]
 8004ec8:	b9d8      	cbnz	r0, 8004f02 <_svfiprintf_r+0xd6>
 8004eca:	06d9      	lsls	r1, r3, #27
 8004ecc:	bf44      	itt	mi
 8004ece:	2220      	movmi	r2, #32
 8004ed0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ed4:	071a      	lsls	r2, r3, #28
 8004ed6:	bf44      	itt	mi
 8004ed8:	222b      	movmi	r2, #43	; 0x2b
 8004eda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ede:	7822      	ldrb	r2, [r4, #0]
 8004ee0:	2a2a      	cmp	r2, #42	; 0x2a
 8004ee2:	d016      	beq.n	8004f12 <_svfiprintf_r+0xe6>
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	200a      	movs	r0, #10
 8004ee8:	9a07      	ldr	r2, [sp, #28]
 8004eea:	4627      	mov	r7, r4
 8004eec:	783b      	ldrb	r3, [r7, #0]
 8004eee:	3401      	adds	r4, #1
 8004ef0:	3b30      	subs	r3, #48	; 0x30
 8004ef2:	2b09      	cmp	r3, #9
 8004ef4:	d950      	bls.n	8004f98 <_svfiprintf_r+0x16c>
 8004ef6:	b1c9      	cbz	r1, 8004f2c <_svfiprintf_r+0x100>
 8004ef8:	e011      	b.n	8004f1e <_svfiprintf_r+0xf2>
 8004efa:	2b25      	cmp	r3, #37	; 0x25
 8004efc:	d0c0      	beq.n	8004e80 <_svfiprintf_r+0x54>
 8004efe:	4627      	mov	r7, r4
 8004f00:	e7b9      	b.n	8004e76 <_svfiprintf_r+0x4a>
 8004f02:	4a3f      	ldr	r2, [pc, #252]	; (8005000 <_svfiprintf_r+0x1d4>)
 8004f04:	463c      	mov	r4, r7
 8004f06:	1a80      	subs	r0, r0, r2
 8004f08:	fa0b f000 	lsl.w	r0, fp, r0
 8004f0c:	4318      	orrs	r0, r3
 8004f0e:	9004      	str	r0, [sp, #16]
 8004f10:	e7d3      	b.n	8004eba <_svfiprintf_r+0x8e>
 8004f12:	9a03      	ldr	r2, [sp, #12]
 8004f14:	1d11      	adds	r1, r2, #4
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	9103      	str	r1, [sp, #12]
 8004f1a:	2a00      	cmp	r2, #0
 8004f1c:	db01      	blt.n	8004f22 <_svfiprintf_r+0xf6>
 8004f1e:	9207      	str	r2, [sp, #28]
 8004f20:	e004      	b.n	8004f2c <_svfiprintf_r+0x100>
 8004f22:	4252      	negs	r2, r2
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	9207      	str	r2, [sp, #28]
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	783b      	ldrb	r3, [r7, #0]
 8004f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f30:	d10d      	bne.n	8004f4e <_svfiprintf_r+0x122>
 8004f32:	787b      	ldrb	r3, [r7, #1]
 8004f34:	1c79      	adds	r1, r7, #1
 8004f36:	2b2a      	cmp	r3, #42	; 0x2a
 8004f38:	d132      	bne.n	8004fa0 <_svfiprintf_r+0x174>
 8004f3a:	9b03      	ldr	r3, [sp, #12]
 8004f3c:	3702      	adds	r7, #2
 8004f3e:	1d1a      	adds	r2, r3, #4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	9203      	str	r2, [sp, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bfb8      	it	lt
 8004f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f4c:	9305      	str	r3, [sp, #20]
 8004f4e:	4c2d      	ldr	r4, [pc, #180]	; (8005004 <_svfiprintf_r+0x1d8>)
 8004f50:	2203      	movs	r2, #3
 8004f52:	7839      	ldrb	r1, [r7, #0]
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 f9f5 	bl	8005344 <memchr>
 8004f5a:	b138      	cbz	r0, 8004f6c <_svfiprintf_r+0x140>
 8004f5c:	2340      	movs	r3, #64	; 0x40
 8004f5e:	1b00      	subs	r0, r0, r4
 8004f60:	fa03 f000 	lsl.w	r0, r3, r0
 8004f64:	9b04      	ldr	r3, [sp, #16]
 8004f66:	3701      	adds	r7, #1
 8004f68:	4303      	orrs	r3, r0
 8004f6a:	9304      	str	r3, [sp, #16]
 8004f6c:	7839      	ldrb	r1, [r7, #0]
 8004f6e:	2206      	movs	r2, #6
 8004f70:	4825      	ldr	r0, [pc, #148]	; (8005008 <_svfiprintf_r+0x1dc>)
 8004f72:	1c7e      	adds	r6, r7, #1
 8004f74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f78:	f000 f9e4 	bl	8005344 <memchr>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d035      	beq.n	8004fec <_svfiprintf_r+0x1c0>
 8004f80:	4b22      	ldr	r3, [pc, #136]	; (800500c <_svfiprintf_r+0x1e0>)
 8004f82:	b9fb      	cbnz	r3, 8004fc4 <_svfiprintf_r+0x198>
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	3307      	adds	r3, #7
 8004f88:	f023 0307 	bic.w	r3, r3, #7
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	9303      	str	r3, [sp, #12]
 8004f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f92:	444b      	add	r3, r9
 8004f94:	9309      	str	r3, [sp, #36]	; 0x24
 8004f96:	e76d      	b.n	8004e74 <_svfiprintf_r+0x48>
 8004f98:	fb00 3202 	mla	r2, r0, r2, r3
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	e7a4      	b.n	8004eea <_svfiprintf_r+0xbe>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	240a      	movs	r4, #10
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	9305      	str	r3, [sp, #20]
 8004fa8:	460f      	mov	r7, r1
 8004faa:	783a      	ldrb	r2, [r7, #0]
 8004fac:	3101      	adds	r1, #1
 8004fae:	3a30      	subs	r2, #48	; 0x30
 8004fb0:	2a09      	cmp	r2, #9
 8004fb2:	d903      	bls.n	8004fbc <_svfiprintf_r+0x190>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0ca      	beq.n	8004f4e <_svfiprintf_r+0x122>
 8004fb8:	9005      	str	r0, [sp, #20]
 8004fba:	e7c8      	b.n	8004f4e <_svfiprintf_r+0x122>
 8004fbc:	fb04 2000 	mla	r0, r4, r0, r2
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e7f1      	b.n	8004fa8 <_svfiprintf_r+0x17c>
 8004fc4:	ab03      	add	r3, sp, #12
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	462a      	mov	r2, r5
 8004fca:	4b11      	ldr	r3, [pc, #68]	; (8005010 <_svfiprintf_r+0x1e4>)
 8004fcc:	a904      	add	r1, sp, #16
 8004fce:	4640      	mov	r0, r8
 8004fd0:	f3af 8000 	nop.w
 8004fd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004fd8:	4681      	mov	r9, r0
 8004fda:	d1d9      	bne.n	8004f90 <_svfiprintf_r+0x164>
 8004fdc:	89ab      	ldrh	r3, [r5, #12]
 8004fde:	065b      	lsls	r3, r3, #25
 8004fe0:	f53f af39 	bmi.w	8004e56 <_svfiprintf_r+0x2a>
 8004fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fe6:	b01d      	add	sp, #116	; 0x74
 8004fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fec:	ab03      	add	r3, sp, #12
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <_svfiprintf_r+0x1e4>)
 8004ff4:	a904      	add	r1, sp, #16
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	f000 f884 	bl	8005104 <_printf_i>
 8004ffc:	e7ea      	b.n	8004fd4 <_svfiprintf_r+0x1a8>
 8004ffe:	bf00      	nop
 8005000:	08009600 	.word	0x08009600
 8005004:	08009606 	.word	0x08009606
 8005008:	0800960a 	.word	0x0800960a
 800500c:	00000000 	.word	0x00000000
 8005010:	08004d75 	.word	0x08004d75

08005014 <_printf_common>:
 8005014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005018:	4691      	mov	r9, r2
 800501a:	461f      	mov	r7, r3
 800501c:	688a      	ldr	r2, [r1, #8]
 800501e:	690b      	ldr	r3, [r1, #16]
 8005020:	4606      	mov	r6, r0
 8005022:	4293      	cmp	r3, r2
 8005024:	bfb8      	it	lt
 8005026:	4613      	movlt	r3, r2
 8005028:	f8c9 3000 	str.w	r3, [r9]
 800502c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005030:	460c      	mov	r4, r1
 8005032:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005036:	b112      	cbz	r2, 800503e <_printf_common+0x2a>
 8005038:	3301      	adds	r3, #1
 800503a:	f8c9 3000 	str.w	r3, [r9]
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	0699      	lsls	r1, r3, #26
 8005042:	bf42      	ittt	mi
 8005044:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005048:	3302      	addmi	r3, #2
 800504a:	f8c9 3000 	strmi.w	r3, [r9]
 800504e:	6825      	ldr	r5, [r4, #0]
 8005050:	f015 0506 	ands.w	r5, r5, #6
 8005054:	d107      	bne.n	8005066 <_printf_common+0x52>
 8005056:	f104 0a19 	add.w	sl, r4, #25
 800505a:	68e3      	ldr	r3, [r4, #12]
 800505c:	f8d9 2000 	ldr.w	r2, [r9]
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	429d      	cmp	r5, r3
 8005064:	db2a      	blt.n	80050bc <_printf_common+0xa8>
 8005066:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800506a:	6822      	ldr	r2, [r4, #0]
 800506c:	3300      	adds	r3, #0
 800506e:	bf18      	it	ne
 8005070:	2301      	movne	r3, #1
 8005072:	0692      	lsls	r2, r2, #26
 8005074:	d42f      	bmi.n	80050d6 <_printf_common+0xc2>
 8005076:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800507a:	4639      	mov	r1, r7
 800507c:	4630      	mov	r0, r6
 800507e:	47c0      	blx	r8
 8005080:	3001      	adds	r0, #1
 8005082:	d022      	beq.n	80050ca <_printf_common+0xb6>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	68e5      	ldr	r5, [r4, #12]
 8005088:	f003 0306 	and.w	r3, r3, #6
 800508c:	2b04      	cmp	r3, #4
 800508e:	bf18      	it	ne
 8005090:	2500      	movne	r5, #0
 8005092:	f8d9 2000 	ldr.w	r2, [r9]
 8005096:	f04f 0900 	mov.w	r9, #0
 800509a:	bf08      	it	eq
 800509c:	1aad      	subeq	r5, r5, r2
 800509e:	68a3      	ldr	r3, [r4, #8]
 80050a0:	6922      	ldr	r2, [r4, #16]
 80050a2:	bf08      	it	eq
 80050a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050a8:	4293      	cmp	r3, r2
 80050aa:	bfc4      	itt	gt
 80050ac:	1a9b      	subgt	r3, r3, r2
 80050ae:	18ed      	addgt	r5, r5, r3
 80050b0:	341a      	adds	r4, #26
 80050b2:	454d      	cmp	r5, r9
 80050b4:	d11b      	bne.n	80050ee <_printf_common+0xda>
 80050b6:	2000      	movs	r0, #0
 80050b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050bc:	2301      	movs	r3, #1
 80050be:	4652      	mov	r2, sl
 80050c0:	4639      	mov	r1, r7
 80050c2:	4630      	mov	r0, r6
 80050c4:	47c0      	blx	r8
 80050c6:	3001      	adds	r0, #1
 80050c8:	d103      	bne.n	80050d2 <_printf_common+0xbe>
 80050ca:	f04f 30ff 	mov.w	r0, #4294967295
 80050ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d2:	3501      	adds	r5, #1
 80050d4:	e7c1      	b.n	800505a <_printf_common+0x46>
 80050d6:	2030      	movs	r0, #48	; 0x30
 80050d8:	18e1      	adds	r1, r4, r3
 80050da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050e4:	4422      	add	r2, r4
 80050e6:	3302      	adds	r3, #2
 80050e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050ec:	e7c3      	b.n	8005076 <_printf_common+0x62>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4622      	mov	r2, r4
 80050f2:	4639      	mov	r1, r7
 80050f4:	4630      	mov	r0, r6
 80050f6:	47c0      	blx	r8
 80050f8:	3001      	adds	r0, #1
 80050fa:	d0e6      	beq.n	80050ca <_printf_common+0xb6>
 80050fc:	f109 0901 	add.w	r9, r9, #1
 8005100:	e7d7      	b.n	80050b2 <_printf_common+0x9e>
	...

08005104 <_printf_i>:
 8005104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005108:	4617      	mov	r7, r2
 800510a:	7e0a      	ldrb	r2, [r1, #24]
 800510c:	b085      	sub	sp, #20
 800510e:	2a6e      	cmp	r2, #110	; 0x6e
 8005110:	4698      	mov	r8, r3
 8005112:	4606      	mov	r6, r0
 8005114:	460c      	mov	r4, r1
 8005116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005118:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800511c:	f000 80bc 	beq.w	8005298 <_printf_i+0x194>
 8005120:	d81a      	bhi.n	8005158 <_printf_i+0x54>
 8005122:	2a63      	cmp	r2, #99	; 0x63
 8005124:	d02e      	beq.n	8005184 <_printf_i+0x80>
 8005126:	d80a      	bhi.n	800513e <_printf_i+0x3a>
 8005128:	2a00      	cmp	r2, #0
 800512a:	f000 80c8 	beq.w	80052be <_printf_i+0x1ba>
 800512e:	2a58      	cmp	r2, #88	; 0x58
 8005130:	f000 808a 	beq.w	8005248 <_printf_i+0x144>
 8005134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005138:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800513c:	e02a      	b.n	8005194 <_printf_i+0x90>
 800513e:	2a64      	cmp	r2, #100	; 0x64
 8005140:	d001      	beq.n	8005146 <_printf_i+0x42>
 8005142:	2a69      	cmp	r2, #105	; 0x69
 8005144:	d1f6      	bne.n	8005134 <_printf_i+0x30>
 8005146:	6821      	ldr	r1, [r4, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800514e:	d023      	beq.n	8005198 <_printf_i+0x94>
 8005150:	1d11      	adds	r1, r2, #4
 8005152:	6019      	str	r1, [r3, #0]
 8005154:	6813      	ldr	r3, [r2, #0]
 8005156:	e027      	b.n	80051a8 <_printf_i+0xa4>
 8005158:	2a73      	cmp	r2, #115	; 0x73
 800515a:	f000 80b4 	beq.w	80052c6 <_printf_i+0x1c2>
 800515e:	d808      	bhi.n	8005172 <_printf_i+0x6e>
 8005160:	2a6f      	cmp	r2, #111	; 0x6f
 8005162:	d02a      	beq.n	80051ba <_printf_i+0xb6>
 8005164:	2a70      	cmp	r2, #112	; 0x70
 8005166:	d1e5      	bne.n	8005134 <_printf_i+0x30>
 8005168:	680a      	ldr	r2, [r1, #0]
 800516a:	f042 0220 	orr.w	r2, r2, #32
 800516e:	600a      	str	r2, [r1, #0]
 8005170:	e003      	b.n	800517a <_printf_i+0x76>
 8005172:	2a75      	cmp	r2, #117	; 0x75
 8005174:	d021      	beq.n	80051ba <_printf_i+0xb6>
 8005176:	2a78      	cmp	r2, #120	; 0x78
 8005178:	d1dc      	bne.n	8005134 <_printf_i+0x30>
 800517a:	2278      	movs	r2, #120	; 0x78
 800517c:	496f      	ldr	r1, [pc, #444]	; (800533c <_printf_i+0x238>)
 800517e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005182:	e064      	b.n	800524e <_printf_i+0x14a>
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800518a:	1d11      	adds	r1, r2, #4
 800518c:	6019      	str	r1, [r3, #0]
 800518e:	6813      	ldr	r3, [r2, #0]
 8005190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005194:	2301      	movs	r3, #1
 8005196:	e0a3      	b.n	80052e0 <_printf_i+0x1dc>
 8005198:	f011 0f40 	tst.w	r1, #64	; 0x40
 800519c:	f102 0104 	add.w	r1, r2, #4
 80051a0:	6019      	str	r1, [r3, #0]
 80051a2:	d0d7      	beq.n	8005154 <_printf_i+0x50>
 80051a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	da03      	bge.n	80051b4 <_printf_i+0xb0>
 80051ac:	222d      	movs	r2, #45	; 0x2d
 80051ae:	425b      	negs	r3, r3
 80051b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80051b4:	4962      	ldr	r1, [pc, #392]	; (8005340 <_printf_i+0x23c>)
 80051b6:	220a      	movs	r2, #10
 80051b8:	e017      	b.n	80051ea <_printf_i+0xe6>
 80051ba:	6820      	ldr	r0, [r4, #0]
 80051bc:	6819      	ldr	r1, [r3, #0]
 80051be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80051c2:	d003      	beq.n	80051cc <_printf_i+0xc8>
 80051c4:	1d08      	adds	r0, r1, #4
 80051c6:	6018      	str	r0, [r3, #0]
 80051c8:	680b      	ldr	r3, [r1, #0]
 80051ca:	e006      	b.n	80051da <_printf_i+0xd6>
 80051cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051d0:	f101 0004 	add.w	r0, r1, #4
 80051d4:	6018      	str	r0, [r3, #0]
 80051d6:	d0f7      	beq.n	80051c8 <_printf_i+0xc4>
 80051d8:	880b      	ldrh	r3, [r1, #0]
 80051da:	2a6f      	cmp	r2, #111	; 0x6f
 80051dc:	bf14      	ite	ne
 80051de:	220a      	movne	r2, #10
 80051e0:	2208      	moveq	r2, #8
 80051e2:	4957      	ldr	r1, [pc, #348]	; (8005340 <_printf_i+0x23c>)
 80051e4:	2000      	movs	r0, #0
 80051e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80051ea:	6865      	ldr	r5, [r4, #4]
 80051ec:	2d00      	cmp	r5, #0
 80051ee:	60a5      	str	r5, [r4, #8]
 80051f0:	f2c0 809c 	blt.w	800532c <_printf_i+0x228>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	f020 0004 	bic.w	r0, r0, #4
 80051fa:	6020      	str	r0, [r4, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d13f      	bne.n	8005280 <_printf_i+0x17c>
 8005200:	2d00      	cmp	r5, #0
 8005202:	f040 8095 	bne.w	8005330 <_printf_i+0x22c>
 8005206:	4675      	mov	r5, lr
 8005208:	2a08      	cmp	r2, #8
 800520a:	d10b      	bne.n	8005224 <_printf_i+0x120>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	07da      	lsls	r2, r3, #31
 8005210:	d508      	bpl.n	8005224 <_printf_i+0x120>
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	6862      	ldr	r2, [r4, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	bfde      	ittt	le
 800521a:	2330      	movle	r3, #48	; 0x30
 800521c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005220:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005224:	ebae 0305 	sub.w	r3, lr, r5
 8005228:	6123      	str	r3, [r4, #16]
 800522a:	f8cd 8000 	str.w	r8, [sp]
 800522e:	463b      	mov	r3, r7
 8005230:	aa03      	add	r2, sp, #12
 8005232:	4621      	mov	r1, r4
 8005234:	4630      	mov	r0, r6
 8005236:	f7ff feed 	bl	8005014 <_printf_common>
 800523a:	3001      	adds	r0, #1
 800523c:	d155      	bne.n	80052ea <_printf_i+0x1e6>
 800523e:	f04f 30ff 	mov.w	r0, #4294967295
 8005242:	b005      	add	sp, #20
 8005244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005248:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800524c:	493c      	ldr	r1, [pc, #240]	; (8005340 <_printf_i+0x23c>)
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005256:	f100 0504 	add.w	r5, r0, #4
 800525a:	601d      	str	r5, [r3, #0]
 800525c:	d001      	beq.n	8005262 <_printf_i+0x15e>
 800525e:	6803      	ldr	r3, [r0, #0]
 8005260:	e002      	b.n	8005268 <_printf_i+0x164>
 8005262:	0655      	lsls	r5, r2, #25
 8005264:	d5fb      	bpl.n	800525e <_printf_i+0x15a>
 8005266:	8803      	ldrh	r3, [r0, #0]
 8005268:	07d0      	lsls	r0, r2, #31
 800526a:	bf44      	itt	mi
 800526c:	f042 0220 	orrmi.w	r2, r2, #32
 8005270:	6022      	strmi	r2, [r4, #0]
 8005272:	b91b      	cbnz	r3, 800527c <_printf_i+0x178>
 8005274:	6822      	ldr	r2, [r4, #0]
 8005276:	f022 0220 	bic.w	r2, r2, #32
 800527a:	6022      	str	r2, [r4, #0]
 800527c:	2210      	movs	r2, #16
 800527e:	e7b1      	b.n	80051e4 <_printf_i+0xe0>
 8005280:	4675      	mov	r5, lr
 8005282:	fbb3 f0f2 	udiv	r0, r3, r2
 8005286:	fb02 3310 	mls	r3, r2, r0, r3
 800528a:	5ccb      	ldrb	r3, [r1, r3]
 800528c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005290:	4603      	mov	r3, r0
 8005292:	2800      	cmp	r0, #0
 8005294:	d1f5      	bne.n	8005282 <_printf_i+0x17e>
 8005296:	e7b7      	b.n	8005208 <_printf_i+0x104>
 8005298:	6808      	ldr	r0, [r1, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	f010 0f80 	tst.w	r0, #128	; 0x80
 80052a0:	6949      	ldr	r1, [r1, #20]
 80052a2:	d004      	beq.n	80052ae <_printf_i+0x1aa>
 80052a4:	1d10      	adds	r0, r2, #4
 80052a6:	6018      	str	r0, [r3, #0]
 80052a8:	6813      	ldr	r3, [r2, #0]
 80052aa:	6019      	str	r1, [r3, #0]
 80052ac:	e007      	b.n	80052be <_printf_i+0x1ba>
 80052ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052b2:	f102 0004 	add.w	r0, r2, #4
 80052b6:	6018      	str	r0, [r3, #0]
 80052b8:	6813      	ldr	r3, [r2, #0]
 80052ba:	d0f6      	beq.n	80052aa <_printf_i+0x1a6>
 80052bc:	8019      	strh	r1, [r3, #0]
 80052be:	2300      	movs	r3, #0
 80052c0:	4675      	mov	r5, lr
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	e7b1      	b.n	800522a <_printf_i+0x126>
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	1d11      	adds	r1, r2, #4
 80052ca:	6019      	str	r1, [r3, #0]
 80052cc:	6815      	ldr	r5, [r2, #0]
 80052ce:	2100      	movs	r1, #0
 80052d0:	6862      	ldr	r2, [r4, #4]
 80052d2:	4628      	mov	r0, r5
 80052d4:	f000 f836 	bl	8005344 <memchr>
 80052d8:	b108      	cbz	r0, 80052de <_printf_i+0x1da>
 80052da:	1b40      	subs	r0, r0, r5
 80052dc:	6060      	str	r0, [r4, #4]
 80052de:	6863      	ldr	r3, [r4, #4]
 80052e0:	6123      	str	r3, [r4, #16]
 80052e2:	2300      	movs	r3, #0
 80052e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e8:	e79f      	b.n	800522a <_printf_i+0x126>
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	462a      	mov	r2, r5
 80052ee:	4639      	mov	r1, r7
 80052f0:	4630      	mov	r0, r6
 80052f2:	47c0      	blx	r8
 80052f4:	3001      	adds	r0, #1
 80052f6:	d0a2      	beq.n	800523e <_printf_i+0x13a>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	079b      	lsls	r3, r3, #30
 80052fc:	d507      	bpl.n	800530e <_printf_i+0x20a>
 80052fe:	2500      	movs	r5, #0
 8005300:	f104 0919 	add.w	r9, r4, #25
 8005304:	68e3      	ldr	r3, [r4, #12]
 8005306:	9a03      	ldr	r2, [sp, #12]
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	429d      	cmp	r5, r3
 800530c:	db05      	blt.n	800531a <_printf_i+0x216>
 800530e:	68e0      	ldr	r0, [r4, #12]
 8005310:	9b03      	ldr	r3, [sp, #12]
 8005312:	4298      	cmp	r0, r3
 8005314:	bfb8      	it	lt
 8005316:	4618      	movlt	r0, r3
 8005318:	e793      	b.n	8005242 <_printf_i+0x13e>
 800531a:	2301      	movs	r3, #1
 800531c:	464a      	mov	r2, r9
 800531e:	4639      	mov	r1, r7
 8005320:	4630      	mov	r0, r6
 8005322:	47c0      	blx	r8
 8005324:	3001      	adds	r0, #1
 8005326:	d08a      	beq.n	800523e <_printf_i+0x13a>
 8005328:	3501      	adds	r5, #1
 800532a:	e7eb      	b.n	8005304 <_printf_i+0x200>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1a7      	bne.n	8005280 <_printf_i+0x17c>
 8005330:	780b      	ldrb	r3, [r1, #0]
 8005332:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005336:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800533a:	e765      	b.n	8005208 <_printf_i+0x104>
 800533c:	08009622 	.word	0x08009622
 8005340:	08009611 	.word	0x08009611

08005344 <memchr>:
 8005344:	b510      	push	{r4, lr}
 8005346:	b2c9      	uxtb	r1, r1
 8005348:	4402      	add	r2, r0
 800534a:	4290      	cmp	r0, r2
 800534c:	4603      	mov	r3, r0
 800534e:	d101      	bne.n	8005354 <memchr+0x10>
 8005350:	2000      	movs	r0, #0
 8005352:	bd10      	pop	{r4, pc}
 8005354:	781c      	ldrb	r4, [r3, #0]
 8005356:	3001      	adds	r0, #1
 8005358:	428c      	cmp	r4, r1
 800535a:	d1f6      	bne.n	800534a <memchr+0x6>
 800535c:	4618      	mov	r0, r3
 800535e:	bd10      	pop	{r4, pc}

08005360 <memcpy>:
 8005360:	b510      	push	{r4, lr}
 8005362:	1e43      	subs	r3, r0, #1
 8005364:	440a      	add	r2, r1
 8005366:	4291      	cmp	r1, r2
 8005368:	d100      	bne.n	800536c <memcpy+0xc>
 800536a:	bd10      	pop	{r4, pc}
 800536c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005374:	e7f7      	b.n	8005366 <memcpy+0x6>

08005376 <memmove>:
 8005376:	4288      	cmp	r0, r1
 8005378:	b510      	push	{r4, lr}
 800537a:	eb01 0302 	add.w	r3, r1, r2
 800537e:	d803      	bhi.n	8005388 <memmove+0x12>
 8005380:	1e42      	subs	r2, r0, #1
 8005382:	4299      	cmp	r1, r3
 8005384:	d10c      	bne.n	80053a0 <memmove+0x2a>
 8005386:	bd10      	pop	{r4, pc}
 8005388:	4298      	cmp	r0, r3
 800538a:	d2f9      	bcs.n	8005380 <memmove+0xa>
 800538c:	1881      	adds	r1, r0, r2
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	42d3      	cmn	r3, r2
 8005392:	d100      	bne.n	8005396 <memmove+0x20>
 8005394:	bd10      	pop	{r4, pc}
 8005396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800539a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800539e:	e7f7      	b.n	8005390 <memmove+0x1a>
 80053a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80053a8:	e7eb      	b.n	8005382 <memmove+0xc>
	...

080053ac <_free_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4605      	mov	r5, r0
 80053b0:	2900      	cmp	r1, #0
 80053b2:	d043      	beq.n	800543c <_free_r+0x90>
 80053b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b8:	1f0c      	subs	r4, r1, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bfb8      	it	lt
 80053be:	18e4      	addlt	r4, r4, r3
 80053c0:	f000 f8d4 	bl	800556c <__malloc_lock>
 80053c4:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <_free_r+0x94>)
 80053c6:	6813      	ldr	r3, [r2, #0]
 80053c8:	4610      	mov	r0, r2
 80053ca:	b933      	cbnz	r3, 80053da <_free_r+0x2e>
 80053cc:	6063      	str	r3, [r4, #4]
 80053ce:	6014      	str	r4, [r2, #0]
 80053d0:	4628      	mov	r0, r5
 80053d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053d6:	f000 b8ca 	b.w	800556e <__malloc_unlock>
 80053da:	42a3      	cmp	r3, r4
 80053dc:	d90b      	bls.n	80053f6 <_free_r+0x4a>
 80053de:	6821      	ldr	r1, [r4, #0]
 80053e0:	1862      	adds	r2, r4, r1
 80053e2:	4293      	cmp	r3, r2
 80053e4:	bf01      	itttt	eq
 80053e6:	681a      	ldreq	r2, [r3, #0]
 80053e8:	685b      	ldreq	r3, [r3, #4]
 80053ea:	1852      	addeq	r2, r2, r1
 80053ec:	6022      	streq	r2, [r4, #0]
 80053ee:	6063      	str	r3, [r4, #4]
 80053f0:	6004      	str	r4, [r0, #0]
 80053f2:	e7ed      	b.n	80053d0 <_free_r+0x24>
 80053f4:	4613      	mov	r3, r2
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	b10a      	cbz	r2, 80053fe <_free_r+0x52>
 80053fa:	42a2      	cmp	r2, r4
 80053fc:	d9fa      	bls.n	80053f4 <_free_r+0x48>
 80053fe:	6819      	ldr	r1, [r3, #0]
 8005400:	1858      	adds	r0, r3, r1
 8005402:	42a0      	cmp	r0, r4
 8005404:	d10b      	bne.n	800541e <_free_r+0x72>
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	4401      	add	r1, r0
 800540a:	1858      	adds	r0, r3, r1
 800540c:	4282      	cmp	r2, r0
 800540e:	6019      	str	r1, [r3, #0]
 8005410:	d1de      	bne.n	80053d0 <_free_r+0x24>
 8005412:	6810      	ldr	r0, [r2, #0]
 8005414:	6852      	ldr	r2, [r2, #4]
 8005416:	4401      	add	r1, r0
 8005418:	6019      	str	r1, [r3, #0]
 800541a:	605a      	str	r2, [r3, #4]
 800541c:	e7d8      	b.n	80053d0 <_free_r+0x24>
 800541e:	d902      	bls.n	8005426 <_free_r+0x7a>
 8005420:	230c      	movs	r3, #12
 8005422:	602b      	str	r3, [r5, #0]
 8005424:	e7d4      	b.n	80053d0 <_free_r+0x24>
 8005426:	6820      	ldr	r0, [r4, #0]
 8005428:	1821      	adds	r1, r4, r0
 800542a:	428a      	cmp	r2, r1
 800542c:	bf01      	itttt	eq
 800542e:	6811      	ldreq	r1, [r2, #0]
 8005430:	6852      	ldreq	r2, [r2, #4]
 8005432:	1809      	addeq	r1, r1, r0
 8005434:	6021      	streq	r1, [r4, #0]
 8005436:	6062      	str	r2, [r4, #4]
 8005438:	605c      	str	r4, [r3, #4]
 800543a:	e7c9      	b.n	80053d0 <_free_r+0x24>
 800543c:	bd38      	pop	{r3, r4, r5, pc}
 800543e:	bf00      	nop
 8005440:	20000084 	.word	0x20000084

08005444 <_malloc_r>:
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	1ccd      	adds	r5, r1, #3
 8005448:	f025 0503 	bic.w	r5, r5, #3
 800544c:	3508      	adds	r5, #8
 800544e:	2d0c      	cmp	r5, #12
 8005450:	bf38      	it	cc
 8005452:	250c      	movcc	r5, #12
 8005454:	2d00      	cmp	r5, #0
 8005456:	4606      	mov	r6, r0
 8005458:	db01      	blt.n	800545e <_malloc_r+0x1a>
 800545a:	42a9      	cmp	r1, r5
 800545c:	d903      	bls.n	8005466 <_malloc_r+0x22>
 800545e:	230c      	movs	r3, #12
 8005460:	6033      	str	r3, [r6, #0]
 8005462:	2000      	movs	r0, #0
 8005464:	bd70      	pop	{r4, r5, r6, pc}
 8005466:	f000 f881 	bl	800556c <__malloc_lock>
 800546a:	4a23      	ldr	r2, [pc, #140]	; (80054f8 <_malloc_r+0xb4>)
 800546c:	6814      	ldr	r4, [r2, #0]
 800546e:	4621      	mov	r1, r4
 8005470:	b991      	cbnz	r1, 8005498 <_malloc_r+0x54>
 8005472:	4c22      	ldr	r4, [pc, #136]	; (80054fc <_malloc_r+0xb8>)
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	b91b      	cbnz	r3, 8005480 <_malloc_r+0x3c>
 8005478:	4630      	mov	r0, r6
 800547a:	f000 f867 	bl	800554c <_sbrk_r>
 800547e:	6020      	str	r0, [r4, #0]
 8005480:	4629      	mov	r1, r5
 8005482:	4630      	mov	r0, r6
 8005484:	f000 f862 	bl	800554c <_sbrk_r>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d126      	bne.n	80054da <_malloc_r+0x96>
 800548c:	230c      	movs	r3, #12
 800548e:	4630      	mov	r0, r6
 8005490:	6033      	str	r3, [r6, #0]
 8005492:	f000 f86c 	bl	800556e <__malloc_unlock>
 8005496:	e7e4      	b.n	8005462 <_malloc_r+0x1e>
 8005498:	680b      	ldr	r3, [r1, #0]
 800549a:	1b5b      	subs	r3, r3, r5
 800549c:	d41a      	bmi.n	80054d4 <_malloc_r+0x90>
 800549e:	2b0b      	cmp	r3, #11
 80054a0:	d90f      	bls.n	80054c2 <_malloc_r+0x7e>
 80054a2:	600b      	str	r3, [r1, #0]
 80054a4:	18cc      	adds	r4, r1, r3
 80054a6:	50cd      	str	r5, [r1, r3]
 80054a8:	4630      	mov	r0, r6
 80054aa:	f000 f860 	bl	800556e <__malloc_unlock>
 80054ae:	f104 000b 	add.w	r0, r4, #11
 80054b2:	1d23      	adds	r3, r4, #4
 80054b4:	f020 0007 	bic.w	r0, r0, #7
 80054b8:	1ac3      	subs	r3, r0, r3
 80054ba:	d01b      	beq.n	80054f4 <_malloc_r+0xb0>
 80054bc:	425a      	negs	r2, r3
 80054be:	50e2      	str	r2, [r4, r3]
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	428c      	cmp	r4, r1
 80054c4:	bf0b      	itete	eq
 80054c6:	6863      	ldreq	r3, [r4, #4]
 80054c8:	684b      	ldrne	r3, [r1, #4]
 80054ca:	6013      	streq	r3, [r2, #0]
 80054cc:	6063      	strne	r3, [r4, #4]
 80054ce:	bf18      	it	ne
 80054d0:	460c      	movne	r4, r1
 80054d2:	e7e9      	b.n	80054a8 <_malloc_r+0x64>
 80054d4:	460c      	mov	r4, r1
 80054d6:	6849      	ldr	r1, [r1, #4]
 80054d8:	e7ca      	b.n	8005470 <_malloc_r+0x2c>
 80054da:	1cc4      	adds	r4, r0, #3
 80054dc:	f024 0403 	bic.w	r4, r4, #3
 80054e0:	42a0      	cmp	r0, r4
 80054e2:	d005      	beq.n	80054f0 <_malloc_r+0xac>
 80054e4:	1a21      	subs	r1, r4, r0
 80054e6:	4630      	mov	r0, r6
 80054e8:	f000 f830 	bl	800554c <_sbrk_r>
 80054ec:	3001      	adds	r0, #1
 80054ee:	d0cd      	beq.n	800548c <_malloc_r+0x48>
 80054f0:	6025      	str	r5, [r4, #0]
 80054f2:	e7d9      	b.n	80054a8 <_malloc_r+0x64>
 80054f4:	bd70      	pop	{r4, r5, r6, pc}
 80054f6:	bf00      	nop
 80054f8:	20000084 	.word	0x20000084
 80054fc:	20000088 	.word	0x20000088

08005500 <_realloc_r>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	4607      	mov	r7, r0
 8005504:	4614      	mov	r4, r2
 8005506:	460e      	mov	r6, r1
 8005508:	b921      	cbnz	r1, 8005514 <_realloc_r+0x14>
 800550a:	4611      	mov	r1, r2
 800550c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005510:	f7ff bf98 	b.w	8005444 <_malloc_r>
 8005514:	b922      	cbnz	r2, 8005520 <_realloc_r+0x20>
 8005516:	f7ff ff49 	bl	80053ac <_free_r>
 800551a:	4625      	mov	r5, r4
 800551c:	4628      	mov	r0, r5
 800551e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005520:	f000 f826 	bl	8005570 <_malloc_usable_size_r>
 8005524:	4284      	cmp	r4, r0
 8005526:	d90f      	bls.n	8005548 <_realloc_r+0x48>
 8005528:	4621      	mov	r1, r4
 800552a:	4638      	mov	r0, r7
 800552c:	f7ff ff8a 	bl	8005444 <_malloc_r>
 8005530:	4605      	mov	r5, r0
 8005532:	2800      	cmp	r0, #0
 8005534:	d0f2      	beq.n	800551c <_realloc_r+0x1c>
 8005536:	4631      	mov	r1, r6
 8005538:	4622      	mov	r2, r4
 800553a:	f7ff ff11 	bl	8005360 <memcpy>
 800553e:	4631      	mov	r1, r6
 8005540:	4638      	mov	r0, r7
 8005542:	f7ff ff33 	bl	80053ac <_free_r>
 8005546:	e7e9      	b.n	800551c <_realloc_r+0x1c>
 8005548:	4635      	mov	r5, r6
 800554a:	e7e7      	b.n	800551c <_realloc_r+0x1c>

0800554c <_sbrk_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	2300      	movs	r3, #0
 8005550:	4c05      	ldr	r4, [pc, #20]	; (8005568 <_sbrk_r+0x1c>)
 8005552:	4605      	mov	r5, r0
 8005554:	4608      	mov	r0, r1
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	f000 f814 	bl	8005584 <_sbrk>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_sbrk_r+0x1a>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	b103      	cbz	r3, 8005566 <_sbrk_r+0x1a>
 8005564:	602b      	str	r3, [r5, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	20000104 	.word	0x20000104

0800556c <__malloc_lock>:
 800556c:	4770      	bx	lr

0800556e <__malloc_unlock>:
 800556e:	4770      	bx	lr

08005570 <_malloc_usable_size_r>:
 8005570:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005574:	2800      	cmp	r0, #0
 8005576:	f1a0 0004 	sub.w	r0, r0, #4
 800557a:	bfbc      	itt	lt
 800557c:	580b      	ldrlt	r3, [r1, r0]
 800557e:	18c0      	addlt	r0, r0, r3
 8005580:	4770      	bx	lr
	...

08005584 <_sbrk>:
 8005584:	4b04      	ldr	r3, [pc, #16]	; (8005598 <_sbrk+0x14>)
 8005586:	4602      	mov	r2, r0
 8005588:	6819      	ldr	r1, [r3, #0]
 800558a:	b909      	cbnz	r1, 8005590 <_sbrk+0xc>
 800558c:	4903      	ldr	r1, [pc, #12]	; (800559c <_sbrk+0x18>)
 800558e:	6019      	str	r1, [r3, #0]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	4402      	add	r2, r0
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	4770      	bx	lr
 8005598:	2000008c 	.word	0x2000008c
 800559c:	20000108 	.word	0x20000108

080055a0 <_init>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	bf00      	nop
 80055a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a6:	bc08      	pop	{r3}
 80055a8:	469e      	mov	lr, r3
 80055aa:	4770      	bx	lr

080055ac <_fini>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr
